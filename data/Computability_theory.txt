computability theory, also known as recursion theory, is a branch of mathematical logic, computer science, and the theory of computation that originated in the 1930s with the study of computable functions and turing degrees. the field has since expanded to include the study of generalized computability and definability. in these areas, computability theory overlaps with proof theory and effective descriptive set theory.
basic questions addressed by computability theory include:

what does it mean for a function on the natural numbers to be computable?
how can noncomputable functions be classified into a hierarchy based on their level of noncomputability?although there is considerable overlap in terms of knowledge and methods, mathematical computability theorists study the theory of relative computability, reducibility notions, and degree structures; those in the computer science field focus on the theory of subrecursive hierarchies, formal methods, and formal languages.


== computable and uncomputable sets ==
computability theory originated in the 1930s, with work of kurt gödel, alonzo church, rózsa péter, alan turing, stephen kleene, and emil post.the fundamental results the researchers obtained established turing computability as the correct formalization of the informal idea of effective calculation. these results led stephen kleene (1952) to coin the two names "church's thesis" (kleene 1952:300) and "turing's thesis" (kleene 1952:376). nowadays these are often considered as a single hypothesis, the church–turing thesis, which states that any function that is computable by an algorithm is a computable function. although initially skeptical, by 1946 gödel argued in favor of this thesis:

"tarski has stressed in his lecture (and i think justly) the great importance of the concept of general recursiveness (or turing's computability). it seems to me that this importance is largely due to the fact that with this concept one has for the first time succeeded in giving an absolute notion to an interesting epistemological notion, i.e., one not depending on the formalism chosen.*"(gödel 1946 in davis 1965:84).with a definition of effective calculation came the first proofs that there are problems in mathematics that cannot be effectively decided. church (1936a, 1936b) and turing (1936), inspired by techniques used by gödel (1931) to prove his incompleteness theorems, independently demonstrated that the entscheidungsproblem is not effectively decidable. this result showed that there is no algorithmic procedure that can correctly decide whether arbitrary mathematical propositions are true or false.
many problems in mathematics have been shown to be undecidable after these initial examples were established.  in 1947, markov and post published independent papers showing that the word problem for semigroups cannot be effectively decided. extending this result, pyotr novikov and william boone showed independently in the 1950s that the word problem for groups is not effectively solvable: there is no effective procedure that, given a word in a finitely presented group, will decide whether the element represented by the word is the identity element of the group. in 1970, yuri matiyasevich proved (using results of julia robinson) matiyasevich's theorem, which implies that hilbert's tenth problem has no effective solution; this problem asked whether there is an effective procedure to decide whether a diophantine equation over the integers has a solution in the integers. the list of undecidable problems gives additional examples of problems with no computable solution.
the study of which mathematical constructions can be effectively performed is sometimes called recursive mathematics; the handbook of recursive mathematics (ershov et al. 1998) covers many of the known results in this field.


== turing computability ==
the main form of computability studied in computability theory was introduced by turing (1936).  a set of natural numbers is said to be a computable set (also called a decidable,  recursive, or turing computable set) if there is a turing machine that, given a number n, halts with output 1 if n is in the set and halts with output 0 if n is not in the set.   a function f from natural numbers to natural numbers is a (turing) computable, or recursive function if there is a turing machine that, on input n, halts and returns output f(n). the use of turing machines here is not necessary; there are many other models of computation that have the same computing power as turing machines; for example the μ-recursive functions obtained from primitive recursion and the μ operator.
the terminology for computable functions and sets is not completely standardized. 
the definition in terms of μ-recursive functions as well as a different definition of rekursiv functions by gödel led to the traditional name recursive for sets and functions computable by a turing machine. the word decidable stems from the german word entscheidungsproblem which was used in the original papers of turing and others. in contemporary use, the term "computable function" has various definitions: according to cutland (1980), it is a partial recursive function (which can be undefined for some inputs), while according to soare (1987) it is a total recursive (equivalently, general recursive) function. this article follows the second of these conventions.  soare (1996) gives additional comments about the terminology.
not every set of natural numbers is computable. the halting problem, which is the set of (descriptions of) turing machines that halt on input 0, is a well-known example of a noncomputable set.  the existence of many noncomputable sets follows from the facts that there are only countably many turing machines, and thus only countably many computable sets, but according to the cantor's theorem, there are uncountably many sets of natural numbers.
although the halting problem is not computable, it is possible to simulate program execution and produce an infinite list of the programs that do halt. thus the halting problem is an example of a computably enumerable (c.e.) set, which is a set that can be enumerated by a turing machine (other terms for computably enumerable include recursively enumerable and semidecidable). equivalently, a set is c.e. if and only if it is the range of some computable function.  the c.e. sets, although not decidable in general, have been studied in detail in computability theory.


== areas of research ==
beginning with the theory of computable sets and functions described above, the field of computability theory has grown to include the study of many closely related topics. these are not independent areas of research: each of these areas draws ideas and results from the others, and most computability theorists are familiar with the majority of them.


=== relative computability and the turing degrees ===

computability theory in mathematical logic has traditionally focused on relative computability, a generalization of turing computability defined using oracle turing machines, introduced by turing (1939).  an oracle turing machine is a hypothetical device which, in addition to performing the actions of a regular turing machine, is able to ask questions of an oracle, which is a particular set of natural numbers.  the oracle machine may only ask questions of the form "is n in the oracle set?". each question will be immediately answered correctly, even if the oracle set is not computable. thus an oracle machine with a noncomputable oracle will be able to compute sets that a turing machine without an oracle cannot.
informally, a set of natural numbers a is turing reducible to a set b if there is an oracle machine that correctly tells whether numbers are in a when run with b as the oracle set (in this case, the set a is also said to be (relatively) computable from b and recursive in b).  if a set a is turing reducible to a set b and b is turing reducible to a then the sets are said to have the same turing degree (also called degree of unsolvability).  the turing degree of a set gives a precise measure of how uncomputable the set is.
the natural examples of sets that are not computable, including many different sets that encode variants of the halting problem, have two properties in common:

they are computably enumerable, and
each can be translated into any other via a many-one reduction. that is, given such sets a and b, there is a total computable function f such that a = {x : f(x) ∈ b}. these sets are said to be many-one equivalent (or m-equivalent).many-one reductions are "stronger" than turing reductions: if a set a is many-one reducible to a set b, then a is turing reducible to b, but the converse does not always hold. although the natural examples of noncomputable sets are all many-one equivalent, it is possible to construct computably enumerable sets a and b such that a is turing reducible to b but not many-one reducible to b. it can be shown that every computably enumerable set is many-one reducible to the halting problem, and thus the halting problem is the most complicated computably enumerable set with respect to many-one reducibility and with respect to turing reducibility. post (1944) asked whether every computably enumerable set is either computable or turing equivalent to the halting problem, that is, whether there is no computably enumerable set with a turing degree intermediate between those two.
as intermediate results, post defined natural types of computably enumerable sets like the simple, hypersimple and hyperhypersimple sets. post showed that these sets are strictly between the computable sets and the halting problem with respect to many-one reducibility. post also showed that some of them are strictly intermediate under other reducibility notions stronger than turing reducibility.  but post left open the main problem of the existence of computably enumerable sets of intermediate turing degree; this problem became known as post's problem. after ten years, kleene and post showed in 1954 that there are intermediate turing degrees between those of the computable sets and the halting problem, but they failed to show that any of these degrees contains a computably enumerable set. very soon after this, friedberg and muchnik independently solved post's problem by establishing the existence of computably enumerable sets of intermediate degree. this groundbreaking result opened a wide study of the turing degrees of the computably enumerable sets which turned out to possess a very complicated and non-trivial structure.
there are uncountably many sets that are not computably enumerable, and the investigation of the turing degrees of all sets is as central in computability theory as the investigation of the computably enumerable turing degrees. many degrees with special properties were constructed: hyperimmune-free degrees where every function computable relative to that degree is majorized by a (unrelativized) computable function; high degrees relative to which one can compute a function f which dominates every computable function g in the sense that there is a constant c depending on g such that g(x) < f(x) for all x > c; random degrees containing algorithmically random sets; 1-generic degrees of 1-generic sets; and the degrees below the halting problem of limit-computable sets.
the study of arbitrary (not necessarily computably enumerable) turing degrees involves the study of the turing jump.  given a set a, the turing jump of a is a set of natural numbers encoding a solution to the halting problem for oracle turing machines running with oracle a.  the turing jump of any set is always of higher turing degree than the original set, and a theorem of friedburg shows that any set that computes the halting problem can be obtained as the turing jump of another set. post's theorem establishes a close relationship between the turing jump operation and the arithmetical hierarchy, which is a classification of certain subsets of the natural numbers based on their definability in arithmetic.
much recent research on turing degrees has focused on the overall structure of the set of turing degrees and the set of turing degrees containing computably enumerable sets.  a deep theorem of shore and slaman (1999) states that the function mapping a degree x to the degree of its turing jump is definable in the partial order of the turing degrees.  a recent survey by ambos-spies and fejer (2006) gives an overview of this research and its historical progression.


=== other reducibilities ===

an ongoing area of research in computability theory studies reducibility relations other than turing reducibility. post (1944) introduced several strong reducibilities, so named because they imply truth-table reducibility. a turing machine implementing a strong reducibility will compute a total function regardless of which oracle it is presented with.  weak reducibilities are those where a reduction process may not terminate for all oracles; turing reducibility is one example.
the strong reducibilities include:

one-one reducibility
a is one-one reducible (or 1-reducible) to b if there is a total computable injective function f such that each n is in a if and only if f(n) is in b.
many-one reducibility
this is essentially one-one reducibility without the constraint that f be injective.  a is many-one reducible (or m-reducible) to b if there is a total computable function f such that each n is in a if and only if f(n) is in b.
truth-table reducibility
a is truth-table reducible to b if a is turing reducible to b via an oracle turing machine that computes a total function regardless of the oracle it is given.  because of compactness of cantor space, this is equivalent to saying that the reduction presents a single list of questions (depending only on the input) to the oracle simultaneously, and then having seen their answers is able to produce an output without asking additional questions regardless of the oracle's answer to the initial queries. many variants of truth-table reducibility have also been studied.further reducibilities (positive, disjunctive, conjunctive, linear and their weak and bounded versions) are discussed in the article reduction (computability theory).
the major research on strong reducibilities has been to compare their theories, both for the class of all computably enumerable sets as well as for the class of all subsets of the natural numbers. furthermore, the relations between the reducibilities has been studied. for example, it is known that every turing degree is either a truth-table degree or is the union of infinitely many truth-table degrees.
reducibilities weaker than turing reducibility (that is, reducibilities that are implied by turing reducibility) have also been studied.  the most well known are arithmetical reducibility and hyperarithmetical reducibility. these reducibilities are closely connected to definability over the standard model of arithmetic.


=== rice's theorem and the arithmetical hierarchy ===
rice showed that for every nontrivial class c (which contains some but not all c.e. sets) the index set e = {e: the eth c.e. set we is in c} has the property that either the halting problem or its complement is many-one reducible to e, that is, can be mapped using a many-one reduction to e (see rice's theorem for more detail). but, many of these index sets are even more complicated than the halting problem. these type of sets can be classified using the arithmetical hierarchy. for example, the index set fin of the class of all finite sets is on the level σ2, the index set rec of the class of all recursive sets is on the level σ3, the index set cofin of all cofinite sets is also on the level σ3 and the index set comp of the class of all turing-complete sets σ4. these hierarchy levels are defined inductively, σn+1 contains just all sets which are computably enumerable relative to σn; σ1 contains the computably enumerable sets. the index sets given here are even complete for their levels, that is, all the sets in these levels can be many-one reduced to the given index sets.


=== reverse mathematics ===

the program of reverse mathematics asks which set-existence axioms are necessary to prove particular theorems of mathematics in subsystems of second-order arithmetic.  this study was initiated by harvey friedman and was studied in detail by stephen simpson and others; simpson (1999) gives a detailed discussion of the program. the set-existence axioms in question correspond informally to axioms saying that the powerset of the natural numbers is closed under various reducibility notions. the weakest such axiom studied in reverse mathematics is recursive comprehension, which states that the powerset of the naturals is closed under turing reducibility.


=== numberings ===
a numbering is an enumeration of functions; it has two parameters, e and x and outputs the value of the e-th function in the numbering on the input x. numberings can be partial-computable although some of its members are total computable functions. admissible numberings are those into which all others can be translated. a friedberg numbering (named after its discoverer) is a one-one numbering of all partial-computable functions; it is necessarily not an admissible numbering. later research dealt also with numberings of other classes like classes of computably enumerable sets. goncharov discovered for example a class of computably enumerable sets for which the numberings fall into exactly two classes with respect to computable isomorphisms.


=== the priority method ===

post's problem was solved with a method called the priority method; a proof using this method is called a priority argument.  this method is primarily used to construct computably enumerable sets with particular properties. to use this method, the desired properties of the set to be constructed are broken up into an infinite list of goals, known as requirements, so that satisfying all the requirements will cause the set constructed to have the desired properties.   each requirement is assigned to a natural number representing the priority of the requirement; so 0 is assigned to the most important priority, 1 to the second most important, and so on.  the set is then constructed in stages, each stage attempting to satisfy one of more of the requirements by either adding numbers to the set or banning numbers from the set so that the final set will satisfy the requirement. it may happen that satisfying one requirement will cause another to become unsatisfied; the priority order is used to decide what to do in such an event.
priority arguments have been employed to solve many problems in computability theory, and have been classified into a hierarchy based on their complexity (soare 1987). because complex priority arguments can be technical and difficult to follow, it has 
traditionally been considered desirable to prove results without priority arguments, or to see if results proved with priority arguments can also be proved without them. 
for example, kummer published a paper on a proof for the existence of friedberg numberings without using the priority method.


=== the lattice of computably enumerable sets ===
when post defined the notion of a simple set as an c.e. set with an infinite complement not containing any infinite c.e. set, he started to study the structure of the computably enumerable sets under inclusion. this lattice became a well-studied structure. computable sets can be defined in this structure by the basic result that a set is computable if and only if the set and its complement are both computably enumerable. infinite c.e. sets have always infinite computable subsets; but on the other hand, simple sets exist but do not always have a coinfinite computable superset. post (1944) introduced already hypersimple and hyperhypersimple sets; later maximal sets were constructed which are c.e. sets such that every c.e. superset is either a finite variant of the given maximal set or is co-finite. post's original motivation in the study of this lattice was to find a structural notion such that every set which satisfies this property is neither in the turing degree of the computable sets nor in the turing degree of the halting problem. post did not find such a property and the solution to his problem applied priority methods instead; harrington and soare (1991) found eventually such a property.


=== automorphism problems ===
another important question is the existence of automorphisms in computability-theoretic structures. one of these structures is that one of computably enumerable sets under inclusion modulo finite difference; in this structure, a is below b if and only if the set difference b − a is finite. maximal sets (as defined in the previous paragraph) have the property that they cannot be automorphic to non-maximal sets, that is, if there is an automorphism of the computably enumerable sets under the structure just mentioned, then every maximal set is mapped to another maximal set. soare (1974) showed that also the converse holds, that is, every two maximal sets are automorphic. so the maximal sets form an orbit, that is, every automorphism preserves maximality and any two maximal sets are transformed into each other by some automorphism. harrington gave a further example of an automorphic property: that of the creative sets, the sets which are many-one equivalent to the halting problem.
besides the lattice of computably enumerable sets, automorphisms are also studied for the structure of the turing degrees of all sets as well as for the structure of the turing degrees of c.e. sets. in both cases, cooper claims to have constructed nontrivial automorphisms which map some degrees to other degrees; this construction has, however, not been verified and some colleagues believe that the construction contains errors and that the question of whether there is a nontrivial automorphism of the turing degrees is still one of the main unsolved questions in this area (slaman and woodin 1986, ambos-spies and fejer 2006).


=== kolmogorov complexity ===

the field of kolmogorov complexity and algorithmic randomness was developed during the 1960s and 1970s by chaitin, kolmogorov, levin, martin-löf and solomonoff (the names are given here in alphabetical order; much of the research was independent, and the unity of the concept of randomness was not understood at the time). the main idea is to consider a universal turing machine u and to measure the complexity of a number (or string) x as the length of the shortest input p such that u(p) outputs x. this approach revolutionized earlier ways to determine when an infinite sequence (equivalently, characteristic function of a subset of the natural numbers) is random or not by invoking a notion of randomness for finite objects. kolmogorov complexity became not only a subject of independent study but is also applied to other subjects as a tool for obtaining proofs.
there are still many open problems in this area. for that reason, a recent research conference in this area was held in january 2007 and a list of open problems is maintained by joseph miller and andre nies.


=== frequency computation ===
this branch of computability theory analyzed the following question: for fixed m and n with 0 < m < n, for which functions a is it possible to compute for any different n inputs x1, x2, ..., xn a tuple of n numbers y1,y2,...,yn such that at least m of the equations a(xk) = yk are true. such sets are known as (m, n)-recursive sets. the first major result in this branch of computability theory is trakhtenbrot's result that a set is computable if it is (m, n)-recursive for some m, n with 2m > n. on the other hand, jockusch's semirecursive sets (which were already known informally before jockusch introduced them 1968) are examples of a set which is (m, n)-recursive if and only if 2m < n + 1. there are uncountably many of these sets and also some computably enumerable but noncomputable sets of this type. later, degtev established a hierarchy of computably enumerable sets that are (1, n + 1)-recursive but not (1, n)-recursive. after a long phase of research by russian scientists, this subject became repopularized in the west by beigel's thesis on bounded queries, which linked frequency computation to the above-mentioned bounded reducibilities and other related notions. one of the major results was kummer's cardinality theory which states that a set a is computable if and only if there is an n such that some algorithm enumerates for each tuple of n different numbers up to n many possible choices of the cardinality of this set of n numbers intersected with a; these choices must contain the true cardinality but leave out at least one false one.


=== inductive inference ===
this is the computability-theoretic branch of learning theory. it is based on e. mark gold's model of learning in the limit from 1967 and has developed since then more and more models of learning. the general scenario is the following: given a class s of computable functions, is there a learner (that is, computable functional) which outputs for any input of the form (f(0),f(1),...,f(n)) a hypothesis. a learner m learns a function f if almost all hypotheses are the same index e of f with respect to a previously agreed on acceptable numbering of all computable functions; m learns s if m learns every f in s. basic results are that all computably enumerable classes of functions are learnable while the class rec of all computable functions is not learnable. many related models have been considered and also the learning of classes of computably enumerable sets from positive data is a topic studied from gold's pioneering paper in 1967 onwards.


=== generalizations of turing computability ===
computability theory includes the study of generalized notions of this field such as arithmetic reducibility, hyperarithmetical reducibility and α-recursion theory, as described by sacks (1990).  these generalized notions include reducibilities that cannot be executed by turing machines but are nevertheless natural generalizations of turing reducibility. these studies include approaches to investigate the analytical hierarchy which differs from the arithmetical hierarchy by permitting quantification over sets of natural numbers in addition to quantification over individual numbers. these areas are linked to the theories of well-orderings and trees; for example the set of all indices of computable (nonbinary) trees without infinite branches is complete for level 
  
    
      
        
          π
          
            1
          
          
            1
          
        
      
    
    {\displaystyle \pi _{1}^{1}}
   of the analytical hierarchy. both turing reducibility and hyperarithmetical reducibility are important in the field of effective descriptive set theory.  the even more general notion of degrees of constructibility is studied in set theory.


=== continuous computability theory ===
computability theory for digital computation is well developed. computability theory is less well developed for analog computation that occurs in analog computers, analog signal processing, analog electronics, neural networks and continuous-time control theory, modelled by differential equations and continuous dynamical systems (orponen 1997; moore 1996).


== relationships between definability, proof and computability ==
there are close relationships between the turing degree of a set of natural numbers and the difficulty (in terms of the arithmetical hierarchy) of defining that set using a first-order formula. one such relationship is made precise by post's theorem. a weaker relationship was demonstrated by kurt gödel in the proofs of his completeness theorem and incompleteness theorems. gödel's proofs show that the set of logical consequences of an effective first-order theory is a computably enumerable set, and that if the theory is strong enough this set will be uncomputable.  similarly, tarski's indefinability theorem can be interpreted both in terms of definability and in terms of computability.
computability theory is also linked to second-order arithmetic, a formal theory of natural numbers and sets of natural numbers.  the fact that certain sets are computable or relatively computable often implies that these sets can be defined in weak subsystems of second-order arithmetic.  the program of reverse mathematics uses these subsystems to measure the noncomputability inherent in well known mathematical theorems. simpson (1999) discusses many aspects of second-order arithmetic and reverse mathematics.
the field of proof theory includes the study of second-order arithmetic and peano arithmetic, as well as formal theories of the natural numbers weaker than peano arithmetic.  one method of classifying the strength of these weak systems is by characterizing which computable functions the system can prove to be total (see fairtlough and wainer (1998)).  for example, in primitive recursive arithmetic any computable function that is provably total is actually primitive recursive, while peano arithmetic proves that functions like the ackermann function, which are not primitive recursive, are total. not every total computable function is provably total in peano arithmetic, however; an example of such a function is provided by goodstein's theorem.


== name ==
the field of mathematical logic dealing with computability and its generalizations has been called "recursion theory" since its early days. robert i. soare, a prominent researcher in the field, has proposed (soare 1996) that the field should be called "computability theory" instead. he argues that turing's terminology using the word "computable" is more natural and more widely understood than the terminology using the word "recursive" introduced by kleene. many contemporary researchers have begun to use this alternate terminology. these researchers also use terminology such as partial computable function and computably enumerable (c.e.) set instead of partial recursive function and recursively enumerable (r.e.) set. not all researchers have been convinced, however, as explained by fortnow and simpson.
some commentators argue that both the names recursion theory and computability theory fail to convey the fact that most of the objects studied in computability theory are not computable.rogers (1967) has suggested that a key property of computability theory is that its results and structures should be invariant under computable bijections on the natural numbers (this suggestion draws on the ideas of the erlangen program in geometry). the idea is that a computable bijection merely renames numbers in a set, rather than indicating any structure in the set, much as a rotation of the euclidean plane does not change any geometric aspect of lines drawn on it. since any two infinite computable sets are linked by a computable bijection, this proposal identifies all the infinite computable sets (the finite computable sets are viewed as trivial). according to rogers, the sets of interest in computability theory are the noncomputable sets, partitioned into equivalence classes by computable bijections of the natural numbers.


== professional organizations ==
the main professional organization for computability theory is the association for symbolic logic, which holds several research conferences each year. the interdisciplinary research association  computability in europe (cie) also organizes a series of annual conferences.


== see also ==

recursion (computer science)
computability logic
transcomputational problem


== notes ==


== references ==
undergraduate level texts

cooper, s.b. (2004). computability theory. chapman & hall/crc. isbn 1-58488-237-9.
cutland, n. (1980). computability, an introduction to recursive function theory. cambridge university press. isbn 0-521-29465-7.
matiyasevich, y. (1993). hilbert's tenth problem. mit press. isbn 0-262-13295-8.advanced texts

jain, s.; osherson, d.; royer, j.; sharma, a. (1999). systems that learn, an introduction to learning theory (2nd ed.). bradford book. isbn 0-262-10077-0.
kleene, s. (1952). introduction to metamathematics. north-holland. isbn 0-7204-2103-9.
lerman, m. (1983). degrees of unsolvability. perspectives in mathematical logic. springer-verlag. isbn 3-540-12155-2.
nies, andre (2009). computability and randomness. oxford university press. isbn 978-0-19-923076-1.
odifreddi, p. (1989). classical recursion theory. north-holland. isbn 0-444-87295-7.
odifreddi, p. (1999). classical recursion theory. vol. ii. elsevier. isbn 0-444-50205-x.
rogers, jr., h. (1987). the theory of recursive functions and effective computability (2nd ed.). mit press. isbn 0-262-68052-1.
sacks, g. (1990). higher recursion theory. springer-verlag. isbn 3-540-19305-7.
simpson, s.g. (1999). subsystems of second order arithmetic. springer-verlag. isbn 3-540-64882-8.
soare, r.i. (1987). recursively enumerable sets and degrees. perspectives in mathematical logic. springer-verlag. isbn 0-387-15299-7.survey papers and collections

ambos-spies, k.; fejer, p. (2006). "degrees of unsolvability" (pdf). archived from the original (pdf) on 2013-04-20. retrieved 2006-10-27. unpublished preprint.
enderton, h. (1977). "elements of recursion theory".  in barwise, j. (ed.). handbook of mathematical logic. north-holland. pp. 527–566. isbn 0-7204-2285-x.
ershov, y.l.; goncharov, s.s.; nerode, a.; remmel, j.b. (1998). handbook of recursive mathematics. north-holland. isbn 0-7204-2285-x.
fairtlough, m.; wainer, s.s. (1998). "hierarchies of provably recursive functions".  in buss, s.r. (ed.). handbook of proof theory. elsevier. pp. 149–208. isbn 978-0-08-053318-6.
soare, r.i. (1996). "computability and recursion" (pdf). bulletin of symbolic logic. 2 (3): 284–321. doi:10.2307/420992. jstor 420992. s2cid 5894394.research papers and collections

burgin, m.; klinger, a. (2004). "experience, generations, and limits in machine learning". theoretical computer science. 317 (1–3): 71–91. doi:10.1016/j.tcs.2003.12.005.
church, a. (1936). "an unsolvable problem of elementary number theory". american journal of mathematics. 58 (2): 345–363. doi:10.2307/2371045. jstor 2371045. reprinted in davis 1965.
church, a. (1936). "a note on the entscheidungsproblem". journal of symbolic logic. 1 (1): 40–41. doi:10.2307/2269326. jstor 2269326.  reprinted in davis 1965.
davis, martin, ed. (2004) [1965]. the undecidable: basic papers on undecidable propositions, unsolvable problems and computable functions. courier. isbn 978-0-486-43228-1.
friedberg, r.m. (1958). "three theorems on recursive enumeration: i. decomposition, ii. maximal set, iii. enumeration without repetition". the journal of symbolic logic. 23 (3): 309–316. doi:10.2307/2964290. jstor 2964290.
gold, e. mark (1967). "language identification in the limit" (pdf). information and control. 10 (5): 447–474. doi:10.1016/s0019-9958(67)91165-5. [1]
harrington, l.; soare, r.i. (1991). "post's program and incomplete recursively enumerable sets". proc. natl. acad. sci. u.s.a. 88 (22): 10242–6. bibcode:1991pnas...8810242h. doi:10.1073/pnas.88.22.10242. pmc 52904. pmid 11607241.
jockusch jr, c.g. (1968). "semirecursive sets and positive reducibility". trans. amer. math. soc. 137 (2): 420–436. doi:10.1090/s0002-9947-1968-0220595-7. jstor 1994957.
kleene, s.c.; post, e.l. (1954). "the upper semi-lattice of degrees of recursive unsolvability". annals of mathematics. second. 59 (3): 379–407. doi:10.2307/1969708. jstor 1969708.
moore, c. (1996). "recursion theory on the reals and continuous-time computation". theoretical computer science. 162 (1): 23–44. citeseerx 10.1.1.6.5519. doi:10.1016/0304-3975(95)00248-0.
myhill, j. (1956). "the lattice of recursively enumerable sets". the journal of symbolic logic. 21: 215–220. doi:10.1017/s002248120008525x.
orponen, p. (1997). "a survey of continuous-time computation theory". advances in algorithms, languages, and complexity: 209–224. citeseerx 10.1.1.53.1991. doi:10.1007/978-1-4613-3394-4_11. isbn 978-1-4613-3396-8.
post, e. (1944). "recursively enumerable sets of positive integers and their decision problems". bulletin of the american mathematical society. 50 (5): 284–316. doi:10.1090/s0002-9904-1944-08111-1. mr 0010514.
post, e. (1947). "recursive unsolvability of a problem of thue". journal of symbolic logic. 12 (1): 1–11. doi:10.2307/2267170. jstor 2267170. reprinted in davis 1965.
shore, richard a.; slaman, theodore a. (1999). "defining the turing jump" (pdf). mathematical research letters. 6 (6): 711–722. doi:10.4310/mrl.1999.v6.n6.a10. mr 1739227.
slaman, t.; woodin, w.h. (1986). "definability in the turing degrees". illinois j. math. 30 (2): 320–334. doi:10.1215/ijm/1256044641. mr 0840131.
soare, r.i. (1974). "automorphisms of the lattice of recursively enumerable sets, part i: maximal sets". annals of mathematics. 100 (1): 80–120. doi:10.2307/1970842. jstor 1970842.
turing, a. (1937). "on computable numbers, with an application to the entscheidungsproblem". proceedings of the london mathematical society. s2-42 (1): 230–265. doi:10.1112/plms/s2-42.1.230. turing, a.m. (1938). "on computable numbers, with an application to the entscheidungsproblem. a correction". proceedings of the london mathematical society. s2-43 (1): 544–6. doi:10.1112/plms/s2-43.6.544. reprinted in davis 1965. pdf from comlab.ox.ac.uk
turing, a.m. (1939). "systems of logic based on ordinals". proceedings of the london mathematical society. s2-45 (1): 161–228. doi:10.1112/plms/s2-45.1.161. hdl:21.11116/0000-0001-91ce-3. reprinted in davis 1965.


== external links ==
association for symbolic logic homepage
computability in europe homepage
webpage on recursion theory course at graduate level with approximately 100 pages of lecture notes
german language lecture notes on inductive inference