knowledge representation and reasoning (krr, kr&r, krÂ²) is the field of artificial intelligence (ai) dedicated to representing information about the world in a form that a computer system can use to solve complex tasks such as diagnosing a medical condition or having a dialog in a natural language. knowledge representation incorporates findings from psychology about how humans solve problems and represent knowledge in order to design formalisms that will make complex systems easier to design and build.  knowledge representation and reasoning also incorporates findings from logic to automate various kinds of reasoning, such as the application of rules or the relations of sets and subsets.
examples of knowledge representation formalisms include semantic nets, systems architecture, frames, rules, and ontologies. examples of automated reasoning engines include inference engines, theorem provers, and classifiers.


== history ==
the earliest work in computerized knowledge representation was focused on general problem-solvers such as the general problem solver (gps) system developed by allen newell and herbert a. simon in 1959. these systems featured data structures for planning and decomposition. the system would begin with a goal. it would then decompose that goal into sub-goals and then set out to construct strategies that could accomplish each subgoal.
in these early days of ai, general search algorithms such as a* were also developed. however, the amorphous problem definitions for systems such as gps meant that they worked only for very constrained toy domains (e.g. the "blocks world"). in order to tackle non-toy problems, ai researchers such as ed feigenbaum and frederick hayes-roth realized that it was necessary to focus systems on more constrained problems.
these efforts led to the cognitive revolution in psychology and to the phase of ai focused on knowledge representation that resulted in expert systems in the 1970s and 80s, production systems, frame languages, etc. rather than general problem solvers, ai changed its focus to expert systems that could match human competence on a specific task, such as medical diagnosis.expert systems gave us the terminology still in use today where ai systems are divided into a knowledge base, with facts about the world and rules, and an inference engine, which applies the rules to the knowledge base in order to answer questions and solve problems. in these early systems the knowledge base tended to be a fairly flat structure, essentially assertions about the values of variables used by the rules.in addition to expert systems, other researchers developed the concept of frame-based languages in the mid-1980s. a frame is similar to an object class: it is an abstract description of a category describing things in the world, problems, and potential solutions. frames were originally used on systems geared toward human interaction, e.g. understanding natural language and the social settings in which various default expectations such as ordering food in a restaurant narrow the search space and allow the system to choose appropriate responses to dynamic situations.
it was not long before the frame communities and the rule-based researchers realized that there was a synergy between their approaches. frames were good for representing the real world, described as classes, subclasses, slots (data values) with various constraints on possible values. rules were good for representing and utilizing complex logic such as the process to make a medical diagnosis. integrated systems were developed that combined frames and rules. one of the most powerful and well known was the 1983 knowledge engineering environment (kee) from intellicorp. kee had a complete rule engine with forward and backward chaining. it also had a complete frame-based knowledge base with triggers, slots (data values), inheritance, and message passing. although message passing originated in the object-oriented community rather than ai it was quickly embraced by ai researchers as well in environments such as kee and in the operating systems for lisp machines from symbolics, xerox, and texas instruments.the integration of frames, rules, and object-oriented programming was significantly driven by commercial ventures such as kee and symbolics spun off from various research projects. at the same time as this was occurring, there was another strain of research that was less commercially focused and was driven by mathematical logic and automated theorem proving.  one of the most influential languages in this research was the kl-one language of the mid-'80s. kl-one was a frame language that had a rigorous semantics, formal definitions for concepts such as an is-a relation. kl-one and languages that were influenced by it such as loom had an automated reasoning engine that was based on formal logic rather than on if-then rules. this reasoner is called the classifier. a classifier can analyze a set of declarations and infer new assertions, for example, redefine a class to be a subclass or superclass of some other class that wasn't formally specified. in this way the classifier can function as an inference engine, deducing new facts from an existing knowledge base. the classifier can also provide consistency checking on a knowledge base (which in the case of kl-one languages is also referred to as an ontology).another area of knowledge representation research was the problem of common sense reasoning. one of the first realizations learned from trying to make software that can function with human natural language was that humans regularly draw on an extensive foundation of knowledge about the real world that we simply take for granted but that is not at all obvious to an artificial agent. basic principles of common sense physics, causality, intentions, etc. an example is the frame problem, that in an event driven logic there need to be axioms that state things maintain position from one moment to the next unless they are moved by some external force. in order to make a true artificial intelligence agent that can converse with humans using natural language and can process basic statements and questions about the world, it is essential to represent this kind of knowledge. one of the most ambitious programs to tackle this problem was doug lenat's cyc project. cyc established its own frame language and had large numbers of analysts document various areas of common sense reasoning in that language. the knowledge recorded in cyc included common sense models of time, causality, physics, intentions, and many others.the starting point for knowledge representation is the knowledge representation hypothesis first formalized by brian c. smith in 1985:
any mechanically embodied intelligent process will be comprised of structural ingredients that a) we as external observers naturally take to represent a propositional account of the knowledge that the overall process exhibits, and b) independent of such external semantic attribution, play a formal but causal and essential role in engendering the behavior that manifests that knowledge.
currently, one of the most active areas of knowledge representation research are projects associated with the semantic web. the semantic web seeks to add a layer of semantics (meaning) on top of the current internet. rather than indexing web sites and pages via keywords, the semantic web creates large ontologies of concepts. searching for a concept will be more effective than traditional text only searches. frame languages and automatic classification play a big part in the vision for the future semantic web. the automatic classification gives developers technology to provide order on a constantly evolving network of knowledge. defining ontologies that are static and incapable of evolving on the fly would be very limiting for internet-based systems. the classifier technology provides the ability to deal with the dynamic environment of the internet.
recent projects funded primarily by the defense advanced research projects agency (darpa) have integrated frame languages and classifiers with markup languages based on xml. the resource description framework (rdf) provides the basic capability to define classes, subclasses, and properties of objects. the web ontology language (owl) provides additional levels of semantics and enables integration with classification engines.


== overview ==
knowledge-representation is a field of artificial intelligence that focuses on designing computer representations that capture information about the world that can be used for solving complex problems.
the justification for knowledge representation is that conventional procedural code is not the best formalism to use to solve complex problems. knowledge representation makes complex software easier to define and maintain than procedural code and can be used in expert systems.
for example, talking to experts in terms of business rules rather than code lessens the semantic gap between users and developers and makes development of complex systems more practical.
knowledge representation goes hand in hand with automated reasoning because one of the main purposes of explicitly representing knowledge is to be able to reason about that knowledge, to make inferences, assert new knowledge, etc. virtually all knowledge representation languages have a reasoning or inference engine as part of the system.a key trade-off in the design of a knowledge representation formalism is that between expressivity and practicality. the ultimate knowledge representation formalism in terms of expressive power and compactness is first order logic (fol). there is no more powerful formalism than that used by mathematicians to define general propositions about the world. however, fol has two drawbacks as a knowledge representation formalism: ease of use and practicality of implementation. first order logic can be intimidating even for many software developers. languages that do not have the complete formal power of fol can still provide close to the same expressive power with a user interface that is more practical for the average developer to understand. the issue of practicality of implementation is that fol in some ways is too expressive. with fol it is possible to create statements (e.g. quantification over infinite sets) that would cause a system to never terminate if it attempted to verify them.
thus, a subset of fol can be both easier to use and more practical to implement. this was a driving motivation behind rule-based expert systems. if-then rules provide a subset of fol but a very useful one that is also very intuitive. the history of most of the early ai knowledge representation formalisms; from databases to semantic nets to theorem provers and production systems can be viewed as various design decisions on whether to emphasize expressive power or computability and efficiency.in a key 1993 paper on the topic, randall davis of mit outlined five distinct roles to analyze a knowledge representation framework:
"a knowledge representation (kr) is most fundamentally a surrogate, a substitute for the thing itself, used to enable an entity to determine consequences by thinking rather than acting,"  i.e., "by reasoning about the world rather than taking action in it."
"it is a set of ontological commitments", i.e., "an answer to the question: in what terms should i think about the world?" 
"it is a fragmentary theory of intelligent reasoning, expressed in terms of three components: (i) the representation's fundamental conception of intelligent reasoning; (ii) the set of inferences the representation sanctions; and (iii) the set of inferences it recommends."
"it is a medium for pragmatically efficient computation", i.e., "the computational environment in which thinking is accomplished. one contribution to this pragmatic efficiency is supplied by the guidance a representation provides for organizing information"  so as "to facilitate making the recommended inferences."
"it is a medium of human expression", i.e., "a language in which we say things about the world."knowledge representation and reasoning are a key enabling technology for the semantic web. languages based on the frame model with automatic classification provide a layer of semantics on top of the existing internet. rather than searching via text strings as is typical today, it will be possible to define logical queries and find pages that map to those queries. the automated reasoning component in these systems is an engine known as the classifier. classifiers focus on the subsumption relations in a knowledge base rather than rules. a classifier can infer new classes and dynamically change the ontology as new information becomes available. this capability is ideal for the ever-changing and evolving information space of the internet.the semantic web integrates concepts from knowledge representation and reasoning with markup languages based on xml.  the resource description framework (rdf) provides the basic capabilities to define knowledge-based objects on the internet with basic features such as is-a relations and object properties. the web ontology language (owl) adds additional semantics and integrates with automatic classification reasoners.


== characteristics ==
in 1985, ron brachman categorized the core issues for knowledge representation as follows:
primitives. what is the underlying framework used to represent knowledge? semantic networks were one of the first knowledge representation primitives. also, data structures and algorithms for general fast search. in this area, there is a strong overlap with research in data structures and algorithms in computer science. in early systems, the lisp programming language, which was modeled after the lambda calculus, was often used as a form of functional knowledge representation. frames and rules were the next kind of primitive. frame languages had various mechanisms for expressing and enforcing constraints on frame data. all data in frames are stored in slots. slots are analogous to relations in entity-relation modeling and to object properties in object-oriented modeling. another technique for primitives is to define languages that are modeled after first order logic (fol). the most well known example is prolog, but there are also many special purpose theorem proving environments. these environments can validate logical models and can deduce new theories from existing models. essentially they automate the process a logician would go through in analyzing a model. theorem proving technology had some specific practical applications in the areas of software engineering. for example, it is possible to prove that a software program rigidly adheres to a formal logical specification.
meta-representation. this is also known as the issue of reflection in computer science. it refers to the capability of a formalism to have access to information about its own state. an example would be the meta-object protocol in smalltalk and clos that gives developers run time access to the class objects and enables them to dynamically redefine the structure of the knowledge base even at run time. meta-representation means the knowledge representation language is itself expressed in that language. for example, in most frame based environments all frames would be instances of a frame class. that class object can be inspected at run time, so that the object can understand and even change its internal structure or the structure of other parts of the model. in rule-based environments, the rules were also usually instances of rule classes. part of the meta protocol for rules were the meta rules that prioritized rule firing.
incompleteness. traditional logic requires additional axioms and constraints to deal with the real world as opposed to the world of mathematics. also, it is often useful to associate degrees of confidence with a statement. i.e., not simply say "socrates is human" but rather "socrates is human with confidence 50%". this was one of the early innovations from expert systems research which migrated to some commercial tools, the ability to associate certainty factors with rules and conclusions. later research in this area is known as fuzzy logic.
definitions and universals vs. facts and defaults. universals are general statements about the world such as "all humans are mortal". facts are specific examples of universals such as "socrates is a human and therefore mortal". in logical terms definitions and universals are about universal quantification while facts and defaults are about existential quantifications. all forms of knowledge representation must deal with this aspect and most do so with some variant of set theory, modeling universals as sets and subsets and definitions as elements in those sets.
non-monotonic reasoning. non-monotonic reasoning allows various kinds of hypothetical reasoning. the system associates facts asserted with the rules and facts used to justify them and as those facts change updates the dependent knowledge as well. in rule based systems this capability is known as a truth maintenance system.
expressive adequacy. the standard that brachman and most ai researchers use to measure expressive adequacy is usually first order logic (fol). theoretical limitations mean that a full implementation of fol is not practical. researchers should be clear about how expressive (how much of full fol expressive power) they intend their representation to be.
reasoning efficiency. this refers to the run time efficiency of the system. the ability of the knowledge base to be updated and the reasoner to develop new inferences in a reasonable period of time. in some ways, this is the flip side of expressive adequacy. in general, the more powerful a representation, the more it has expressive adequacy, the less efficient its automated reasoning engine will be. efficiency was often an issue, especially for early applications of knowledge representation technology. they were usually implemented in interpreted environments such as lisp, which were slow compared to more traditional platforms of the time.


== ontology engineering ==

in the early years of knowledge-based systems the knowledge-bases were fairly small. the knowledge-bases that were meant to actually solve real problems rather than do proof of concept demonstrations needed to focus on well defined problems. so for example, not just medical diagnosis as a whole topic, but medical diagnosis of certain kinds of diseases.
as knowledge-based technology scaled up, the need for larger knowledge bases and for modular knowledge bases that could communicate and integrate with each other became apparent. this gave rise to the discipline of ontology engineering, designing and building large knowledge bases that could be used by multiple projects. one of the leading research projects in this area was the cyc project. cyc was an attempt to build a huge encyclopedic knowledge base that would contain not just expert knowledge but common sense knowledge. in designing an artificial intelligence agent, it was soon realized that representing common sense knowledge, knowledge that humans simply take for granted, was essential to make an ai that could interact with humans using natural language. cyc was meant to address this problem. the language they defined was known as cycl.
after cycl, a number of ontology languages have been developed. most are declarative languages, and are either frame languages, or are based on first-order logic. modularityâthe ability to define boundaries around specific domains and problem spacesâis essential for these languages because as stated by tom gruber, "every ontology is a treaty- a social agreement among people with common motive in sharing." there are always many competing and differing views that make any general purpose ontology impossible. a general purpose ontology would have to be applicable in any domain and different areas of knowledge need to be unified.there is a long history of work attempting to build ontologies for a variety of task domains, e.g., an ontology for liquids, the lumped element model widely used in representing electronic circuits (e.g.,), as well as ontologies for time, belief, and even programming itself. each of these offers a way to see some part of the world.
the lumped element model, for instance, suggests that we think of circuits in terms of components with connections between them, with signals flowing instantaneously along the connections. this is a useful view, but not the only possible one. a different ontology arises if we need to attend to the electrodynamics in the device: here signals propagate at finite speed and an object (like a resistor) that was previously viewed as a single component with an i/o behavior may now have to be thought of as an extended medium through which an electromagnetic wave flows.
ontologies can of course be written down in a wide variety of languages and notations (e.g., logic, lisp, etc.); the essential information is not the form of that language but the content, i.e., the set of concepts offered as a way of thinking about the world. simply put, the important part is notions like connections and components, not the choice between writing them as predicates or lisp constructs.
the commitment made selecting one or another ontology can produce a sharply different view of the task at hand. consider the difference that arises in selecting the lumped element view of a circuit rather than the electrodynamic view of the same device. as a second example, medical diagnosis viewed in terms of rules (e.g., mycin) looks substantially different from the same task viewed in terms of frames (e.g., internist). where mycin sees the medical world as made up of empirical associations connecting symptom to disease, internist sees a set of prototypes, in particular prototypical diseases, to be matched against the case at hand.


== see also ==
alphabet of human thought
belief revision
chunking (psychology)
commonsense knowledge base
conceptual graph
datr, a language for lexical knowledge representation
fo(.), a kr language based on first-order logic
logico-linguistic modeling
knowledge graph
knowledge management
semantic technology
valuation-based system


== references ==


== further reading ==
ronald j. brachman; what is-a is and isn't. an analysis of taxonomic links in semantic networks; ieee computer, 16 (10); october 1983
ronald j. brachman, hector j. levesque knowledge representation and reasoning, morgan kaufmann, 2004 isbn 978-1-55860-932-7
ronald j. brachman, hector j. levesque (eds) readings in knowledge representation, morgan kaufmann, 1985, isbn 0-934613-01-x
chein, m., mugnier, m.-l. (2009),graph-based knowledge representation: computational foundations of conceptual graphs, springer, 2009,isbn 978-1-84800-285-2.
randall davis, howard shrobe, and peter szolovits; what is a knowledge representation? ai magazine, 14(1):17-33,1993
ronald fagin, joseph y. halpern, yoram moses, moshe y. vardi reasoning about knowledge, mit press, 1995, isbn 0-262-06162-7
jean-luc hainaut, jean-marc hick, vincent englebert, jean henrard, didier roland: understanding implementations of is-a relations. er 1996: 42-57
hermann helbig: knowledge representation and the semantics of natural language, springer, berlin, heidelberg, new york 2006
frank van harmelen, vladimir lifschitz and bruce porter: handbook of knowledge representation 2007.
arthur b. markman: knowledge representation  lawrence erlbaum associates, 1998
john f. sowa: knowledge representation: logical, philosophical, and computational foundations. brooks/cole: new york, 2000
adrian walker, michael mccord, john f. sowa, and walter g. wilson: knowledge systems and prolog, second edition, addison-wesley, 1990
mary-anne williams and hans rott: "frontiers in belief revision, kluwer", 2001.


== external links ==
what is a knowledge representation? by randall davis and others
introduction to knowledge modeling by pejman makhfi
introduction to description logics course by enrico franconi, faculty of computer science, free university of bolzano, italy
datr lexical knowledge representation language
loom project home page
principles of knowledge representation and reasoning incorporated 
description logic in practice: a classic application
the rule markup initiative
nelements kos - a non-free 3d knowledge representation system