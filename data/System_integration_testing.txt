system integration testing (sit) involves the overall testing of a complete system of many subsystem components or elements.  the system under test may be composed of  hardware, or software, or hardware with embedded software, or hardware/software with human-in-the-loop testing. 
sit consists, initially, of the "process of assembling the constituent parts of a system in a logical, cost-effective way, comprehensively checking system execution (all nominal & exceptional paths), and including a full functional check-out."  following integration, system test is a process of "verifying that the system meets its requirements, and validating that the system performs in accordance with the customer or user expectations."in technology product development, the beginning of system integration testing is often the first time that an entire system has been assembled such that it can be tested as a whole.  in order to make system testing most productive, the many constituent assemblies and subsystems will have typically gone through a subsystem test and successfully verified that each subsystem meets its requirements at the subsystem interface level. 
in the context of software systems and software engineering, system integration testing is a testing process that exercises a software system's coexistence with others. with multiple integrated systems, assuming that each have already passed system testing, sit proceeds to test their required interactions. following this, the deliverables are passed on to acceptance testing.


== software system integration testing ==
for software sit is part of the software testing life cycle for collaborative projects. usually, a round of sit precedes the user acceptance test (uat) round. software providers usually run a pre-sit round of tests before consumers run their sit test cases.
for example, if an integrator (company) is providing an enhancement to a customer's existing solution, then they integrate the new application layer and the new database layer with the customer's existing application and database layers.
after the integration is complete, users use both the new part (extended part) and old part (pre-existing part) of the integrated application to update data. a process should exist to exchange data imports and exports between the two data layers. this data exchange process should keep both systems up-to-date. the purpose of system integration testing is to ensure all parts of these systems successfully co-exist and exchange data where necessary.
there may be more parties in the integration, for example the primary customer (consumer) can have their own customers; there may be also multiple providers.


=== data driven method ===
a simple method of sit which can be performed with minimum usage of software testing tools. data imports and exports are exchanged before the behavior of each data field within each individual layer is investigated. after the software collaboration, there are three main states of data flow.


==== data state within the integration layer ====
integration layer can be a middleware or web service(s) which acts as a medium for data imports and data exports. data imports and exports performance can be checked with the following steps:
cross-checking of the data properties within the integration layer with technical/business specification documents.
for web service involvement with the integration layer, wsdl and xsd can be used against web service request for the cross check.
middleware involvement with the integration layer allows for data mappings against middleware logs for the cross check.
execute some unit tests. cross check the data mappings (data positions, declarations) and requests (character length, data types) with technical specifications.
investigate the server logs/middleware logs for troubleshooting.reading knowledge of wsdl, xsd, dtd, xml, and edi might be required for this.


==== data state within the database layer ====
system integration testing of a database layer might proceed as follows:
first check whether all the data have committed to the database layer from the integration layer.
then check the data properties with the table and column properties with relevant to technical/business specification documents.
check the data validations/constrains with business specification documents.
if there are any processing data within the database layer then check stored procedures with relevant specifications.
investigate the server logs for troubleshooting.knowledge in sql and reading knowledge in [stored procedures] might be required for this


==== data state within the application layer ====
there is not that much to do with the application layer when we perform a system integration testing:
mark all the fields from business requirement documents which should be visible in the ui.
create a data map from database fields to application fields and check whether necessary fields are visible in ui.
check data properties by some positive and negative test cases.there are many combinations of data imports and export which we can perform by considering the time period for system integration testing. testers must select best combinations to perform with the limited time and when repeat some of the steps to test those combinations.


== references ==


== see also ==
integration testing
user acceptance testing (uat)