portable document format (pdf), standardized as iso 32000, is a file format developed by adobe in 1992 to present documents, including text formatting and images, in a manner independent of application software, hardware, and operating systems. based on the postscript language, each pdf file encapsulates a complete description of a fixed-layout flat document, including the text, fonts, vector graphics, raster images and other information needed to display it. pdf has its roots in "the camelot project" initiated by  adobe co-founder john warnock in 1991.pdf was standardized as iso 32000 in 2008. the last edition as iso 32000-2:2020 was published in december 2020.
pdf files may contain a variety of content besides flat text and graphics including logical structuring elements, interactive elements such as annotations and form-fields, layers, rich media (including video content), three-dimensional objects using u3d or prc, and various other data formats. the pdf specification also provides for encryption and digital signatures, file attachments, and metadata to enable workflows requiring these features.


== history ==

adobe systems made the pdf specification available free of charge in 1993. in the early years pdf was popular mainly in desktop publishing workflows, and competed with a variety of formats such as djvu, envoy, common ground digital paper, farallon replica and even adobe's own postscript format.
pdf was a proprietary format controlled by adobe until it was released as an open standard on july 1, 2008, and published by the international organization for standardization as iso 32000-1:2008, at which time control of the specification passed to an iso committee of volunteer industry experts. in 2008, adobe published a public patent license to iso 32000-1 granting royalty-free rights for all patents owned by adobe that are necessary to make, use, sell, and distribute pdf-compliant implementations.pdf 1.7, the sixth edition of the pdf specification that became iso 32000-1, includes some proprietary technologies defined only by adobe, such as adobe xml forms architecture (xfa) and javascript extension for acrobat, which are referenced by iso 32000-1 as normative and indispensable for the full implementation of the iso 32000-1 specification. these proprietary technologies are not standardized and their specification is published only on adobe's website. many of them are also not supported by popular third-party implementations of pdf.
in december 2020, the second edition of pdf 2.0, iso 32000-2:2020, was published, including clarifications, corrections and critical updates to normative references. iso 32000-2 does not include any proprietary technologies as normative references.


== technical details ==
a pdf file is often a combination of vector graphics, text, and bitmap graphics. the basic types of content in a pdf are 

typeset text stored as content streams (i.e., not encoded in plain text);
vector graphics for illustrations and designs that consist of shapes and lines;
raster graphics for photographs and other types of images
multimedia objects in the document.in later pdf revisions, a pdf document can also support links (inside document or web page), forms, javascript (initially available as a plugin for acrobat 3.0), or any other types of embedded contents that can be handled using plug-ins.
pdf combines three technologies:

an equivalent subset of the postscript page description programming language but in declarative form, for generating the layout and graphics.
a font-embedding/replacement system to allow fonts to travel with the documents.
a structured storage system to bundle these elements and any associated content into a single file, with data compression where appropriate.


=== postscript language ===
postscript is a page description language run in an interpreter to generate an image, a process requiring many resources. it can handle graphics and standard features of programming languages such as if statements and loop commands. pdf is largely based on postscript but simplified to remove flow control features like these, while graphics commands equivalent to lineto remain.
historically, the postscript-like pdf code is generated from a source postscript file. the graphics commands that are output by the postscript code are collected and tokenized. any files, graphics, or fonts to which the document refers also are collected. then, everything is compressed to a single file. therefore, the entire postscript world (fonts, layout, measurements) remains intact.as a document format, pdf has several advantages over postscript:

pdf contains tokenized and interpreted results of the postscript source code, for direct correspondence between changes to items in the pdf page description and changes to the resulting page appearance.
pdf (from version 1.4) supports transparent graphics; postscript does not.
postscript is an interpreted programming language with an implicit global state, so instructions accompanying the description of one page can affect the appearance of any following page. therefore, all preceding pages in a postscript document must be processed to determine the correct appearance of a given page, whereas each page in a pdf document is unaffected by the others. as a result, pdf viewers allow the user to quickly jump to the final pages of a long document, whereas a postscript viewer needs to process all pages sequentially before being able to display the destination page (unless the optional postscript document structuring conventions have been carefully compiled and included).pdf 1.6 and later supports interactive 3d documents embedded in a pdf file: 3d drawings can be embedded using u3d or prc and various other data formats.


== file format ==
a pdf file contains 7-bit ascii characters, except for certain elements that may have binary content.
the file starts with a header containing a magic number (as a readable string) and the version of the format, for example %pdf-1.7. the format is a subset of a cos ("carousel" object structure) format. a cos tree file consists primarily of objects, of which there are nine types:
boolean values, representing true or false
real numbers
integers
strings, enclosed within parentheses ((...)) or represented as hexadecimal within single angle brackets (<...>). strings may contain 8-bit characters.
names, starting with a forward slash (/)
arrays, ordered collections of objects enclosed within square brackets ([...])
dictionaries, collections of objects indexed by names enclosed within double angle brackets (<<...>>)
streams, usually containing large amounts of optionally compressed binary data, preceded by a dictionary and enclosed between the stream and endstream keywords.
the null objectfurthermore, there may be comments, introduced with the percent sign (%). comments may contain 8-bit characters.
objects may be either direct (embedded in another object) or indirect. indirect objects are numbered with an object number and a generation number and defined between the obj and endobj keywords if residing in the document root. beginning with pdf version 1.5, indirect objects (except other streams) may also be located in special streams known as object streams (marked /type /objstm). this technique enables non-stream objects to have standard stream filters applied to them, reduces the size of files that have large numbers of small indirect objects and is especially useful for tagged pdf. object streams do not support specifying an object's generation number (other than 0).
an index table, also called the cross-reference table, is located near the end of the file and gives the byte offset of each indirect object from the start of the file. this design allows for efficient random access to the objects in the file, and also allows for small changes to be made without rewriting the entire file (incremental update). before pdf version 1.5, the table would always be in a special ascii format, be marked with the xref keyword, and follow the main body composed of indirect objects. version 1.5 introduced optional cross-reference streams, which have the form of a standard stream object, possibly with filters applied. such a stream may be used instead of the ascii cross-reference table and contains the offsets and other information in binary format. the format is flexible in that it allows for integer width specification (using the /w array), so that for example, a document not exceeding 64 kib in size may dedicate only 2  bytes for object offsets.
at the end of a pdf file is a footer containing

the startxref keyword followed by an offset to the start of the cross-reference table (starting with the xref keyword) or the cross-reference stream object, followed by
the %%eof end-of-file marker.if a cross-reference stream is not being used, the footer is preceded by the trailer keyword followed by a dictionary containing information that would otherwise be contained in the cross-reference stream object's dictionary:

a reference to the root object of the tree structure, also known as the catalog (/root)
the count of indirect objects in the cross-reference table (/size)
other optional informationthere are two layouts to the pdf files: non-linearized (not "optimized") and linearized ("optimized"). non-linearized pdf files can be smaller than their linear counterparts, though they are slower to access because portions of the data required to assemble pages of the document are scattered throughout the pdf file. linearized pdf files (also called "optimized" or "web optimized" pdf files) are constructed in a manner that enables them to be read in a web browser plugin without waiting for the entire file to download, since all objects required for the first page to display are optimally organized at the start of the file. pdf files may be optimized using adobe acrobat software or qpdf.


== imaging model ==
the basic design of how graphics are represented in pdf is very similar to that of postscript, except for the use of transparency, which was added in pdf 1.4.
pdf graphics use a device-independent cartesian coordinate system to describe the surface of a page. a pdf page description can use a matrix to scale, rotate, or skew graphical elements. a key concept in pdf is that of the graphics state, which is a collection of graphical parameters that may be changed, saved, and restored by a page description. pdf has (as of version 2.0) 25 graphics state properties, of which some of the most important are:

the current transformation matrix (ctm), which determines the coordinate system
the clipping path
the color space
the alpha constant, which is a key component of transparency
black point compensation control (introduced in pdf 2.0)


=== vector graphics ===
as in postscript, vector graphics in pdf are constructed with paths. paths are usually composed of lines and cubic bézier curves, but can also be constructed from the outlines of text. unlike postscript, pdf does not allow a single path to mix text outlines with lines and curves. paths can be stroked, filled, fill then stroked, or used for clipping. strokes and fills can use any color set in the graphics state, including patterns. pdf supports several types of patterns. the simplest is the tiling pattern in which a piece of artwork is specified to be drawn repeatedly. this may be a colored tiling pattern, with the colors specified in the pattern object, or an uncolored tiling pattern, which defers color specification to the time the pattern is drawn. beginning with pdf 1.3 there is also a shading pattern, which draws continuously varying colors. there are seven types of shading patterns of which the simplest are the axial shading (type 2) and radial shading (type 3). 


=== raster images ===
raster images in pdf (called image xobjects) are represented by dictionaries with an associated stream. the dictionary describes the properties of the image, and the stream contains the image data. (less commonly, small raster images may be embedded directly in a page description as an inline image.) images are typically filtered for compression purposes. image filters supported in pdf include the following general-purpose filters:

ascii85decode, a filter used to put the stream into 7-bit ascii,
asciihexdecode, similar to ascii85decode but less compact,
flatedecode, a commonly used filter based on the deflate algorithm defined in rfc 1951 (deflate is also used in the gzip, png, and zip file formats among others); introduced in pdf 1.2; it can use one of two groups of predictor functions for more compact zlib/deflate compression: predictor 2 from the tiff 6.0 specification and predictors (filters) from the png specification (rfc 2083),
lzwdecode, a filter based on lzw compression; it can use one of two groups of predictor functions for more compact lzw compression: predictor 2 from the tiff 6.0 specification and predictors (filters) from the png specification,
runlengthdecode, a simple compression method for streams with repetitive data using the run-length encoding algorithm and the image-specific filters,
dctdecode, a lossy filter based on the jpeg standard,
ccittfaxdecode, a lossless bi-level (black/white) filter based on the group 3 or group 4 ccitt (itu-t) fax compression standard defined in itu-t t.4 and t.6,
jbig2decode, a lossy or lossless bi-level (black/white) filter based on the jbig2 standard, introduced in pdf 1.4, and
jpxdecode, a lossy or lossless filter based on the jpeg 2000 standard, introduced in pdf 1.5.normally all image content in a pdf is embedded in the file. but pdf allows image data to be stored in external files by the use of external streams or alternate images. standardized subsets of pdf, including pdf/a and pdf/x, prohibit these features.


=== text ===
text in pdf is represented by text elements in page content streams. a text element specifies that characters should be drawn at certain positions. the characters are specified using the encoding of a selected font resource.
a font object in pdf is a description of a digital typeface. it may either describe the characteristics of a typeface, or it may include an embedded font file. the latter case is called an embedded font while the former is called an unembedded font. the font files that may be embedded are based on widely used standard digital font formats: type 1 (and its compressed variant cff), truetype, and (beginning with pdf 1.6) opentype. additionally pdf supports the type 3 variant in which the components of the font are described by pdf graphic operators. 
fourteen typefaces, known as the standard 14 fonts, have a special significance in pdf documents:

times (v3) (in regular, italic, bold, and bold italic)
courier (in regular, oblique, bold and bold oblique)
helvetica (v3) (in regular, oblique, bold and bold oblique)
symbol
zapf dingbatsthese fonts are sometimes called the base fourteen fonts. these fonts, or suitable substitute fonts with the same metrics, should be available in most pdf readers, but they are not guaranteed to be available in the reader, and may only display correctly if the system has them installed. fonts may be substituted if they are not embedded in a pdf.
within text strings, characters are shown using character codes (integers) that map to glyphs in the current font using an encoding. there are several predefined encodings, including winansi, macroman, and many encodings for east asian languages and a font can have its own built-in encoding. (although the winansi and macroman encodings are derived from the historical properties of the windows and macintosh operating systems, fonts using these encodings work equally well on any platform.) pdf can specify a predefined encoding to use, the font's built-in encoding or provide a lookup table of differences to a predefined or built-in encoding (not recommended with truetype fonts). the encoding mechanisms in pdf were designed for type 1 fonts, and the rules for applying them to truetype fonts are complex.
for large fonts or fonts with non-standard glyphs, the special encodings identity-h (for horizontal writing) and identity-v (for vertical) are used. with such fonts, it is necessary to provide a tounicode table if semantic information about the characters is to be preserved.


=== transparency ===
the original imaging model of pdf was, like postscript's, opaque: each object drawn on the page completely replaced anything previously marked in the same location. in pdf 1.4 the imaging model was extended to allow transparency. when transparency is used, new objects interact with previously marked objects to produce blending effects. the addition of transparency to pdf was done by means of new extensions that were designed to be ignored in products written to pdf 1.3 and earlier specifications. as a result, files that use a small amount of transparency might view acceptably by older viewers, but files making extensive use of transparency could be viewed incorrectly by an older viewer.
the transparency extensions are based on the key concepts of transparency groups, blending modes, shape, and alpha. the model is closely aligned with the features of adobe illustrator version 9. the blend modes were based on those used by adobe photoshop at the time. when the pdf 1.4 specification was published, the formulas for calculating blend modes were kept secret by adobe. they have since been published.the concept of a transparency group in pdf specification is independent of existing notions of "group" or "layer" in applications such as adobe illustrator. those groupings reflect logical relationships among objects that are meaningful when editing those objects, but they are not part of the imaging model.


== additional features ==


=== logical structure and accessibility ===
a "tagged" pdf (see clause 14.8 in iso 32000) includes document structure and semantics information to enable reliable text extraction and accessibility. technically speaking, tagged pdf is a stylized use of the format that builds on the logical structure framework introduced in pdf 1.3. tagged pdf defines a set of standard structure types and attributes that allow page content (text, graphics, and images) to be extracted and reused for other purposes.tagged pdf is not required in situations where a pdf file is intended only for print. since the feature is optional, and since the rules for tagged pdf were relatively vague in iso 32000-1, support for tagged pdf amongst consuming devices, including assistive technology (at), is uneven at this time. iso 32000-2, however, includes an improved discussion of tagged pdf which is anticipated to facilitate further adoption.
an iso-standardized subset of pdf specifically targeted at accessibility, pdf/ua, was first published in 2012.


=== optional content groups (layers) ===
with the introduction of pdf version, 1.5 (2003) came the concept of layers. layers, or as they are more formally known optional content groups (ocgs), refer to sections of content in a pdf document that can be selectively viewed or hidden by document authors or consumers. this capability is useful in cad drawings, layered artwork, maps, multi-language documents, etc.
basically, it consists of an optional content properties dictionary added to the document root. this dictionary contains an array of optional content groups (ocgs), each describing a set of information and each of which may be individually displayed or suppressed, plus a set of optional content configuration dictionaries, which give the status (displayed or suppressed) of the given ocgs.


=== encryption and signatures ===
a pdf file may be encrypted, for security, in which case a password is needed to view or edit the contents. pdf 2.0 defines 256-bit aes encryption as standard for pdf 2.0 files. the pdf reference also defines ways that third parties can define their own encryption systems for pdf.
pdf files may be digitally signed, to provide secure authentication; complete details on implementing digital signatures in pdf is provided in iso 32000-2.
pdf files may also contain embedded drm restrictions that provide further controls that limit copying, editing or printing. these restrictions depend on the reader software to obey them, so the security they provide is limited.
the standard security provided by pdf consists of two different methods and two different passwords: a user password, which encrypts the file and prevents opening, and an owner password, which specifies operations that should be restricted even when the document is decrypted, which can include modifying, printing, or copying text and graphics out of the document, or adding or modifying text notes and acroform fields. the user password encrypts the file, while the owner password does not, instead relying on client software to respect these restrictions. an owner password can easily be removed by software, including some free online services. thus, the use restrictions that a document author places on a pdf document are not secure, and cannot be assured once the file is distributed; this warning is displayed when applying such restrictions using adobe acrobat software to create or edit pdf files.
even without removing the password, most freeware or open source pdf readers ignore the permission "protections" and allow the user to print or make copy of excerpts of the text as if the document were not limited by password protection.beginning with pdf 1.5, usage rights (ur) signatures are used to enable additional interactive features that are not available by default in a particular pdf viewer application. the signature is used to validate that the permissions have been granted by a bona fide granting authority. for example, it can be used to allow a user
to save the pdf document along with a modified form and/or annotation data
import form data files in fdf, xfdf, and text (csv/tsv) formats
export form data files in fdf and xfdf formats
submit form data
instantiate new pages from named page templates
apply a digital signature to existing digital signature form field
create, delete, modify, copy, import, and export annotationsfor example, adobe systems grants permissions to enable additional features in adobe reader, using public-key cryptography. adobe reader verifies that the signature uses a certificate from an adobe-authorized certificate authority. any pdf application can use this same mechanism for its own purposes.under specific circumstances including non-patched systems of the receiver, the information the receiver of a digital signed document sees can be manipulated by the sender after the document has been signed by the signer.pades (pdf advanced electronic signatures) is a set of restrictions and extensions to pdf and iso 32000-1 making it suitable for advanced electronic signatures. this is published by etsi as ts 102 778.


=== file attachments ===
pdf files can have file attachments which processors may access and open or save to a local filesystem.


=== metadata ===
pdf files can contain two types of metadata. the first is the document information dictionary, a set of key/value fields such as author, title, subject, creation and update dates. this is optional and is referenced from info key in the trailer of the file. a small set of fields is defined and can be extended with additional text values if required. this method is deprecated in pdf 2.0.
in pdf 1.4, support was added for metadata streams, using the extensible metadata platform (xmp) to add xml standards-based extensible metadata as used in other file formats. pdf 2.0 allows metadata to be attached to any object in the document, such as information about embedded illustrations, fonts, images as well as the whole document (attaching to the document catalog), using an extensible schema.
pdf documents can also contain display settings, including the page display layout and zoom level in a viewer preferences object. adobe reader uses these settings to override the user's default settings when opening the document. the free adobe reader cannot remove these settings.


=== accessibility ===
pdf files can be created specifically to be accessible for people with disabilities. pdf file formats in use as of 2014 can include tags, text equivalents, captions, audio descriptions, and more. some software can automatically produce tagged pdfs, but this feature is not always enabled by default. leading screen readers, including jaws, window-eyes, hal, and kurzweil 1000 and 3000 can read tagged pdf. moreover, tagged pdfs can be re-flowed and magnified for readers with visual impairments. adding tags to older pdfs and those that are generated from scanned documents can present some challenges.
one of the significant challenges with pdf accessibility is that pdf documents have three distinct views, which, depending on the document's creation, can be inconsistent with each other. the three views are (i) the physical view, (ii) the tags view, and (iii) the content view. the physical view is displayed and printed (what most people consider a pdf document). the tags view is what screen readers and other assistive technologies use to deliver high-quality navigation and reading experience to users with disabilities. the content view is based on the physical order of objects within the pdf's content stream and may be displayed by software that does not fully support the tags' view, such as the reflow feature in adobe's reader.
pdf/ua, the international standard for accessible pdf based on iso 32000-1 was first published as iso 14289–1 in 2012 and establishes normative language for accessible pdf technology.


=== multimedia ===
rich media pdf is a pdf file including interactive content that can be embedded or linked within the file.


=== forms ===
interactive forms is a mechanism to add forms to the pdf file format. pdf currently supports two different methods for integrating data and pdf forms. both formats today coexist in the pdf specification:
acroforms (also known as acrobat forms), introduced in the pdf 1.2 format specification and included in all later pdf specifications.
xml forms architecture (xfa) forms, introduced in the pdf 1.5 format specification. adobe xfa forms are not compatible with acroforms. xfa was deprecated from pdf with pdf 2.0.acroforms were introduced in the pdf 1.2 format. acroforms permit using objects (e.g. text boxes, radio buttons, etc.) and some code (e.g. javascript). alongside the standard pdf action types, interactive forms (acroforms) support submitting, resetting, and importing data. the "submit" action transmits the names and values of selected interactive form fields to a specified uniform resource locator (url). interactive form field names and values may be submitted in any of the following formats, (depending on the settings of the action's exportformat, submitpdf, and xfdf flags):
html form format
html 4.01 specification since pdf 1.5; html 2.0 since 1.2
forms data format (fdf)
based on pdf, uses the same syntax and has essentially the same file structure, but is much simpler than pdf since the body of an fdf document consists of only one required object. forms data format is defined in the pdf specification (since pdf 1.2). the forms data format can be used when submitting form data to a server, receiving the response, and incorporating it into the interactive form. it can also be used to export form data to stand-alone files that can be imported back into the corresponding pdf interactive form. fdf was originally defined in 1996 as part of iso 32000-2:2017.
xml forms data format (xfdf)
(external xml forms data format specification, version 2.0; supported since pdf 1.5; it replaced the "xml" form submission format defined in pdf 1.4) the xml version of forms data format, but the xfdf implements only a subset of fdf containing forms and annotations. some entries in the fdf dictionary do not have xfdf equivalents – such as the status, encoding, javascript, page's keys, embeddedfdfs, differences, and target. in addition, xfdf does not allow the spawning, or addition, of new pages based on the given data; as can be done when using an fdf file. the xfdf specification is referenced (but not included) in pdf 1.5 specification (and in later versions). it is described separately in xml forms data format specification. the pdf 1.4 specification allowed form submissions in xml format, but this was replaced by submissions in xfdf format in the pdf 1.5 specification. xfdf conforms to the xml standard. xfdf can be used in the same way as fdf; e.g., form data is submitted to a server, modifications are made, then sent back and the new form data is imported in an interactive form. it can also be used to export form data to stand-alone files that can be imported back into the corresponding pdf interactive form. as of august, 2019, xfdf 3.0 is an iso/iec standard under the formal name iso 19444-1:2019 - document management — xml forms data format — part 1: use of iso 32000-2 (xfdf 3.0). this standard is a normative reference of iso 32000-2.
pdfthe entire document can be submitted rather than individual fields and values, as was defined in pdf 1.4.
acroforms can keep form field values in external stand-alone files containing key-value pairs. the external files may use forms data format (fdf) and xml forms data format (xfdf) files. the usage rights (ur) signatures define rights for import form data files in fdf, xfdf and text (csv/tsv) formats, and export form data files in fdf and xfdf formats.in pdf 1.5, adobe systems introduced a proprietary format for forms; adobe xml forms architecture (xfa). adobe xfa forms are not compatible with iso 32000's acroforms feature, and most pdf processors do not handle xfa content. the xfa specification is referenced from iso 32000-1/pdf 1.7 as an external proprietary specification, and was entirely deprecated from pdf with iso 32000-2 (pdf 2.0).


== licensing ==
anyone may create applications that can read and write pdf files without having to pay royalties to adobe systems; adobe holds patents to pdf, but licenses them for royalty-free use in developing software complying with its pdf specification.


== security ==

in november 2019, researchers from ruhr university bochum and hackmanit gmbh published attacks on digitally signed pdfs . they showed how to change the visible content in a signed pdf without invalidating the signature in 21 of 22 desktop pdf viewers and 6 of 8 online validation services by abusing implementation flaws.
at the same conference, they additionally showed how to exfiltrate the plaintext of encrypted content in pdfs. in 2021, they showed new so-called shadow attacks on pdfs that abuse the flexibility of features provided in the specification. an overview of security issues in pdfs regarding denial of service, information disclosure, data manipulation, and arbitrary code execution attacks was presented by jens müller.pdf attachments carrying viruses were first discovered in 2001. the virus, named outlook.pdfworm or peachy, uses microsoft outlook to send itself as an attached adobe pdf file. it was activated with adobe acrobat, but not with acrobat reader.from time to time, new vulnerabilities are discovered in various versions of adobe reader, prompting the company to issue security fixes. other pdf readers are also susceptible. one aggravating factor is that a pdf reader can be configured to start automatically if a web page has an embedded pdf file, providing a vector for attack. if a malicious web page contains an infected pdf file that takes advantage of a vulnerability in the pdf reader, the system may be compromised even if the browser is secure. some of these vulnerabilities are a result of the pdf standard allowing pdf documents to be scripted with javascript. disabling javascript execution in the pdf reader can help mitigate such future exploits, although it does not protect against exploits in other parts of the pdf viewing software. security experts say that javascript is not essential for a pdf reader and that the security benefit that comes from disabling javascript outweighs any compatibility issues caused. one way of avoiding pdf file exploits is to have a local or web service convert files to another format before viewing.
on march 30, 2010 security researcher didier stevens reported an adobe reader and foxit reader exploit that runs a malicious executable if the user allows it to launch when asked.


== software ==


=== viewers and editors ===
pdf viewers are generally provided free of charge, and many versions are available from a variety of sources.
there are many software options for creating pdfs, including the pdf printing capabilities built into macos, ios, and most linux distributions, libreoffice, microsoft office 2007 (if updated to sp2) and later, wordperfect 9, scribus, numerous pdf print drivers for microsoft windows, the pdftex typesetting system, the docbook pdf tools, applications developed around ghostscript and adobe acrobat itself as well as adobe indesign, adobe framemaker, adobe illustrator, adobe photoshop. google's online office suite google docs allows for uploading and saving to pdf. some web apps offer free pdf editing and annotation tools.
the free software foundation once thought of as one of their high priority projects to be "developing a free, high-quality and fully functional set of libraries and programs that implement the pdf file format and associated technologies to the iso 32000 standard." in 2011, however, the gnu pdf project was removed from the list of "high priority projects" due to the maturation of the poppler library, which has enjoyed wider use in applications such as evince with the gnome desktop environment. poppler is based on xpdf code base. there are also commercial development libraries available as listed in list of pdf software.
the apache pdfbox project of the apache software foundation is an open source java library for working with pdf documents. pdfbox is licensed under the apache license.


=== printing ===
raster image processors (rips) are used to convert pdf files into a raster format suitable for imaging onto paper and other media in printers, digital production presses and prepress in a process known as rasterisation. rips capable of processing pdf directly include the adobe pdf print engine from adobe systems and jaws and the harlequin rip from global graphics.
in 1993, the jaws raster image processor from global graphics became the first shipping prepress rip that interpreted pdf natively without conversion to another format. the company released an upgrade to their harlequin rip with the same capability in 1997.agfa-gevaert introduced and shipped apogee, the first prepress workflow system based on pdf, in 1997.
many commercial offset printers have accepted the submission of press-ready pdf files as a print source, specifically the pdf/x-1a subset and variations of the same. the submission of press-ready pdf files is a replacement for the problematic need for receiving collected native working files.
in 2006, pdf was widely accepted as the standard print job format at the open source development labs printing summit. it is supported as a print job format by the common unix printing system and desktop application projects such as gnome, kde, firefox, thunderbird, libreoffice and openoffice have switched to emit print jobs in pdf.some desktop printers also support direct pdf printing, which can interpret pdf data without external help.


=== native display model ===
pdf was selected as the "native" metafile format for mac os x, replacing the pict format of the earlier classic mac os. the imaging model of the quartz graphics layer is based on the model common to display postscript and pdf, leading to the nickname display pdf. the preview application can display pdf files, as can version 2.0 and later of the safari web browser. system-level support for pdf allows mac os x applications to create pdf documents automatically, provided they support the os-standard printing architecture. the files are then exported in pdf 1.3 format according to the file header. when taking a screenshot under mac os x versions 10.0 through 10.3, the image was also captured as a pdf; later versions save screen captures as a png file, though this behavior can be set back to pdf if desired.


=== annotation ===

adobe acrobat is one example of proprietary software that allows the user to annotate, highlight, and add notes to already created pdf files. one unix application available as free software (under the gnu general public license) is pdfedit. the freeware foxit reader, available for microsoft windows, macos and linux, allows annotating documents. tracker software's pdf-xchange viewer allows annotations and markups without restrictions in its freeware alternative. apple's macos's integrated pdf viewer, preview, does also enable annotations as does the open-source software skim, with the latter supporting interaction with latex, synctex, and pdfsync and integration with bibdesk reference management software. freeware qiqqa can create an annotation report that summarizes all the annotations and notes one has made across their library of pdfs. the text verification tool exports differences in documents as annotations and markups.
there are also web annotation systems that support annotation in pdf and other documents formats. in cases where pdfs are expected to have all of the functionality of paper documents, ink annotation is required.


== alternatives ==

the open xml paper specification is a competing format used both as a page description language and as the native print spooler format for microsoft windows since windows vista.
mixed object: document content architecture is a competing format. mo:dca-p is a part of advanced function presentation.


== see also ==
web document
xsl formatting objects


== references ==


== further reading ==
hardy, m. r. b.; brailsford, d. f. (2002). "mapping and displaying structural transformations between xml and pdf". proceedings of the 2002 acm symposium on document engineering – doceng '02 (pdf). proceedings of the 2002 acm symposium on document engineering. pp. 95–102. doi:10.1145/585058.585077. isbn 1-58113-594-7. s2cid 9371237.
pdf 2.0 "iso 32000-2:2020(en), document management — portable document format — part 2: pdf 2.0". www.iso.org. retrieved 2020-12-16.
pdf 2.0 "iso 32000-2:2017(en), document management — portable document format — part 2: pdf 2.0". www.iso.org. retrieved 2019-01-31.
pdf 1.7 (iso 32000-1:2008)
pdf 1.7 and errata to 1.7
pdf 1.6 (isbn 0-321-30474-8) and errata to 1.6
pdf 1.5 and errata to 1.5
pdf 1.4 (isbn 0-201-75839-3) and errata to 1.4
pdf 1.3 (isbn 0-201-61588-6) and errata to 1.3


== external links ==
pdf association – the pdf association is the industry association for software developers producing or processing pdf files.
adobe pdf 101: summary of pdf
adobe: postscript vs. pdf – official introductory comparison of ps, eps vs. pdf.
pdf standards....transitioning the pdf specification from a de facto standard to a de jure standard at the wayback machine (archived april 24, 2011) – information about pdf/e and pdf/ua specification for accessible documents file format (archived by the wayback machine)
pdf/a-1 iso standard published by the international organization for standardization (with corrigenda)
pdf reference and adobe extensions to the pdf specification
portable document format: an introduction for programmers – introduction to pdf vs. postscript and pdf internals (up to v1.3)
the camelot paper – the paper in which john warnock outlined the project that created pdf
everything you wanted to know about pdf but was afraid to ask – recording of a talk by leonard rosenthol (45 mins) (adobe systems) at tug 2007