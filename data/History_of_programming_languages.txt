the history of programming languages spans from documentation of early mechanical computers to modern tools for software development. early programming languages were highly specialized, relying on mathematical notation and similarly obscure syntax. throughout the 20th century, research in compiler theory led to the creation of high-level programming languages, which use a more accessible syntax to communicate instructions. 
the first high-level programming language was plankalkül, created by konrad zuse between 1942 and 1945. the first high-level language to have an associated compiler was created by corrado böhm in 1951, for his phd thesis. the first commercially available language was fortran (formula translation), developed in 1956 (first manual appeared in 1956, but first developed in 1954) by a team led by john backus at ibm.


== early history ==
during 1842–1849, ada lovelace translated the memoir of italian mathematician luigi menabrea about charles babbage's newest proposed machine: the analytical engine; she supplemented the memoir with notes that specified in detail a method for calculating bernoulli numbers with the engine, recognized by most of historians as the world's first published computer program.the first computer codes were specialized for their applications: e.g., alonzo church was able to express the lambda calculus in a formulaic way and the turing machine was an abstraction of the operation of a tape-marking machine.
jacquard looms and charles babbage's difference engine both had simple languages for describing the actions that these machines should perform hence they were the creators of the first programming language.


== first programming languages ==
in the 1940s, the first recognizably modern electrically powered computers were created. the limited speed and memory capacity forced programmers to write hand-tuned assembly language programs. it was eventually realized that programming in assembly language required a great deal of intellectual effort.
an early proposal for a high-level programming language was plankalkül, developed by konrad zuse for his z1 computer between 1942 and 1945 but not implemented at the time.the first functioning programming languages designed to communicate instructions to a computer were written in the early 1950s. john mauchly's short code, proposed in 1949, was one of the first high-level languages ever developed for an electronic computer. unlike machine code, short code statements represented mathematical expressions in understandable form. however, the program had to be translated into machine code every time it ran, making the process much slower than running the equivalent machine code.
in the early 1950s, alick glennie developed autocode, possibly the first compiled programming language, at the university of manchester. in 1954, a second iteration of the language, known as the "mark 1 autocode," was developed for the mark 1 by r. a. brooker. brooker also developed an autocode for the ferranti mercury in the 1950s in conjunction with the university of manchester. the version for the edsac 2 was devised by douglas hartree of university of cambridge mathematical laboratory in 1961. known as edsac 2 autocode, it was a straight development from mercury autocode adapted for local circumstances and was noted for its object code optimization and source-language diagnostics which were advanced for the time. a contemporary but separate thread of development, atlas autocode was developed for the university of manchester atlas 1 machine.
in 1954, fortran was invented at ibm by a team led by john backus; it was the first widely used high-level general purpose programming language to have a functional implementation, as opposed to just a design on paper. when fortran was first introduced, it was viewed with skepticism due to bugs, delays in development, and the comparative efficiency of "hand-coded" programs written in assembly. however, in a hardware market that was rapidly evolving; the language eventually became known for its efficiency. it is still a popular language for high-performance computing and is used for programs that benchmark and rank the world's fastest supercomputers.another early programming language was devised by grace hopper in the us, called flow-matic. it was developed for the univac i at remington rand during the period from 1955 until 1959. hopper found that business data processing customers were uncomfortable with mathematical notation, and in early 1955, she and her team wrote a specification for an english programming language and implemented a prototype. the flow-matic compiler became publicly available in early 1958 and was substantially complete in 1959. flow-matic was a major influence in the design of cobol, since only it and its direct descendant aimaco were in actual use at the time.other languages still in use today include lisp (1958), invented by john mccarthy and cobol (1959), created by the short range committee. another milestone in the late 1950s was the publication, by a committee of american and european computer scientists, of "a new language for algorithms"; the algol 60 report (the "algorithmic language"). this report consolidated many ideas circulating at the time and featured three key language innovations:

nested block structure: code sequences and associated declarations could be grouped into blocks without having to be turned into separate, explicitly named procedures;
lexical scoping: a block could have its own private variables, procedures and functions, invisible to code outside that block, that is, information hiding.another innovation, related to this, was in how the language was described:

a mathematically exact notation, backus–naur form (bnf), was used to describe the language's syntax. nearly all subsequent programming languages have used a variant of bnf to describe the context-free portion of their syntax.algol 60 was particularly influential in the design of later languages, some of which soon became more popular. the burroughs large systems were designed to be programmed in an extended subset of algol.
algol's key ideas were continued, producing algol 68:

syntax and semantics became even more orthogonal, with anonymous routines, a recursive typing system with higher-order functions, etc.;
not only the context-free part, but the full language syntax and semantics were defined formally, in terms of van wijngaarden grammar, a formalism designed specifically for this purpose.algol 68's many little-used language features (for example, concurrent and parallel blocks) and its complex system of syntactic shortcuts and automatic type coercions made it unpopular with implementers and gained it a reputation of being difficult. niklaus wirth actually walked out of the design committee to create the simpler pascal language.

some notable languages that were developed in this period include:


== establishing fundamental paradigms ==

the period from the late 1960s to the late 1970s brought a major flowering of programming languages. most of the major language paradigms now in use were invented in this period:
speakeasy, developed in 1964 at argonne national laboratory (anl) by stanley cohen, is an oops (object-oriented programming system, much like the later matlab, idl and mathematica) numerical package. speakeasy has a clear fortran foundation syntax. it first addressed efficient physics computation internally at anl, was modified for research use (as "modeleasy") for the federal reserve board in the early 1970s and then was made available commercially; speakeasy and modeleasy are still in use currently.
simula, invented in the late 1960s by nygaard and dahl as a superset of algol 60, was the first language designed to support object-oriented programming.
forth, the earliest concatenative programming language was designed by charles moore in 1969 as a personal development system while at the national radio astronomy observatory (nrao).
c, an early systems programming language, was developed by dennis ritchie and ken thompson at bell labs between 1969 and 1973.
smalltalk (mid-1970s) provided a complete ground-up design of an object-oriented language.
prolog, designed in 1972 by colmerauer, roussel, and kowalski, was the first logic programming language.
ml built a polymorphic type system (invented by robin milner in 1973) on top of lisp, pioneering statically typed functional programming languages.each of these languages spawned an entire family of descendants, and most modern languages count at least one of them in their ancestry.
the 1960s and 1970s also saw considerable debate over the merits of "structured programming", which essentially meant programming without the use of "goto". a significant fraction of programmers believed that, even in languages that provide "goto", it is bad programming style to use it except in rare circumstances. this debate was closely related to language design: some languages did not include a "goto" at all, which forced structured programming on the programmer.
to provide even faster compile times, some languages were structured for "one-pass compilers" which expect subordinate routines to be defined first, as with pascal, where the main routine, or driver function, is the final section of the program listing.
some notable languages that were developed in this period include:


== 1980s: consolidation, modules, performance ==

the 1980s were years of relative consolidation in imperative languages. rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decade. c++ combined object-oriented and systems programming. the united states government standardized ada, a systems programming language intended for use by defense contractors. in japan and elsewhere, vast sums were spent investigating so-called fifth-generation programming languages that incorporated logic programming constructs. the functional languages community moved to standardize ml and lisp. research in miranda, a functional language with lazy evaluation, began to take hold in this decade.
one important new trend in language design was an increased focus on programming for large-scale systems through the use of modules, or large-scale organizational units of code. modula, ada, and ml all developed notable module systems in the 1980s. module systems were often wedded to generic programming constructs---generics being, in essence, parametrized modules (see also polymorphism in object-oriented programming).
although major new paradigms for imperative programming languages did not appear, many researchers expanded on the ideas of prior languages and adapted them to new contexts. for example, the languages of the argus and emerald systems adapted object-oriented programming to distributed systems.
the 1980s also brought advances in programming language implementation. the risc movement in computer architecture postulated that hardware should be designed for compilers rather than for human assembly programmers. aided by processor speed improvements that enabled increasingly aggressive compilation techniques, the risc movement sparked greater interest in compilation technology for high-level languages.
language technology continued along these lines well into the 1990s. 
some notable languages that were developed in this period include:


== 1990s: the internet age ==

the rapid growth of the internet in the mid-1990s was the next major historic event in programming languages. by opening up a radically new platform for computer systems, the internet created an opportunity for new languages to be adopted. in particular, the javascript programming language rose to popularity because of its early integration with the netscape navigator web browser. various other scripting languages achieved widespread use in developing customized applications for web servers such as php. the 1990s saw no fundamental novelty in imperative languages, but much recombination and maturation of old ideas. this era began the spread of functional languages. a big driving philosophy was programmer productivity. many "rapid application development" (rad) languages emerged, which usually came with an ide, garbage collection, and were descendants of older languages. all such languages were object-oriented. these included object pascal, visual basic, and java. java in particular received much attention.
more radical and innovative than the rad languages were the new scripting languages. these did not directly descend from other languages and featured new syntaxes and more liberal incorporation of features. many consider these scripting languages to be more productive than even the rad languages, but often because of choices that make small programs simpler but large programs more difficult to write and maintain. nevertheless, scripting languages came to be the most prominent ones used in connection with the web.
some notable languages that were developed in this period include:


== current trends ==
programming language evolution continues, in both industry and research. some of the recent trends have included:

increasing support for functional programming in mainstream languages used commercially, including pure functional programming for making code easier to reason about and easier to parallelize (at both micro- and macro- levels)
constructs to support concurrent and distributed programming.
mechanisms for adding security and reliability verification to the language: extended static checking, dependent typing, information flow control, static thread safety.
alternative mechanisms for composability and modularity: mixins, traits, typeclasses, delegates, aspects.
component-oriented software development.
metaprogramming, reflection or access to the abstract syntax tree
aop or aspect oriented programming allowing developers to insert code in another module or class at "join points"
domain specific languages and code generation
xml for graphical interface (xul, xaml)
increased interest in distribution and mobility.
integration with databases, including xml and relational databases.
open source as a developmental philosophy for languages, including the gnu compiler collection and languages such as php, python, ruby, and scala.
more interest in visual programming languages like scratch, labview and pwct
massively parallel languages for gpu graphics processing units and supercomputer arrays, including opencl
early research into quantum computing programming languages (see list)
early research in applying artificial intelligence techniques to generate code like using gpt-3some notable languages developed during this period include:

other new programming languages include red, crystal, elm, hack, haxe, zig and reason.


== key figures ==

some key people who helped develop programming languages:

alan cooper, developer of visual basic.
alan kay, pioneering work on object-oriented programming, and originator of smalltalk.
anders hejlsberg, developer of turbo pascal, delphi, c#, and typescript.
arthur whitney, developer of a+, k, and q.
bertrand meyer, inventor of eiffel.
bjarne stroustrup, developer of c++.
brad cox, co-creator of objective-c.
brendan eich, developer of javascript.
brian kernighan, co-author of the first book on the c programming language with dennis ritchie, coauthor of the awk and ampl programming languages.
chuck moore, inventor of forth, the first concatenative programming language, and a prominent name in stack machine microprocessor design.
chris lattner, creator of swift and llvm.
cleve moler, creator of matlab.
dennis ritchie, inventor of c. unix operating system, plan 9 operating system.
douglas mcilroy, influenced and designed such languages as snobol, trac, pl/i, altran, tmg and c++.
grace hopper, first to use the term compiler and developer of flow-matic, influenced development of cobol. popularized machine-independent programming languages and the term "debugging".
guido van rossum, creator of python.
james gosling, lead developer of java and its precursor, oak.
jean ichbiah, chief designer of ada, ada 83.
jean-yves girard, co-inventor of the polymorphic lambda calculus (system f).
jeff bezanson, main designer, and one of the core developers of julia.
jeffrey snover, inventor of powershell.
joe armstrong, creator of erlang.
john backus, inventor of fortran and cooperated in the design of algol 58 and algol 60.
john c. reynolds, co-inventor of the polymorphic lambda calculus (system f).
john mccarthy, inventor of lisp.
john von neumann, originator of the operating system concept.
graydon hoare, inventor of rust.
ken thompson, inventor of b, go, inferno (operating system) and unix operating system co-author.
kenneth e. iverson, developer of apl, and co-developer of j along with roger hui.
konrad zuse, designed the first high-level programming language, plankalkül (which influenced algol 58).
kristen nygaard, pioneered object-oriented programming, co-invented simula.
larry wall, creator of the perl programming language (see perl and raku).
martin odersky, creator of scala, and previously a contributor to the design of java.
martin richards developed the bcpl programming language, forerunner of the b and c languages.
nathaniel rochester, inventor of first assembler (ibm 701).
niklaus wirth, inventor of pascal, modula and oberon.
ole-johan dahl, pioneered object-oriented programming, co-invented simula.
rasmus lerdorf, creator of php.
rich hickey, creator of clojure.
jean paoli, co-creater of xml
robert gentleman, co-creator of r.
robert griesemer, co-creator of go.
robin milner, inventor of ml, and sharing credit for hindley–milner polymorphic type inference.
rob pike, co-creator of go, inferno (operating system) and plan 9 (operating system) operating system co-author.
ross ihaka, co-creator of r.
ryan dahl, creator of node.js.
stanley cohen, inventor of speakeasy, which was created with an oops, object-oriented programming system, the first instance, in 1964.
stephen wolfram, creator of mathematica.
terry a. davis, creator of holyc.
walter bright, creator of d.
yukihiro matsumoto, creator of ruby.


== see also ==


== references ==


== further reading ==
rosen, saul, (editor), programming systems and languages, mcgraw-hill, 1967.
sammet, jean e., programming languages: history and fundamentals, prentice-hall, 1969.
sammet, jean e. (july 1972). "programming languages: history and future". communications of the acm. 15 (7): 601–610. doi:10.1145/361454.361485. s2cid 2003242.
richard l. wexelblat (ed.): history of programming languages, academic press 1981.
thomas j. bergin and richard g. gibson (eds.): history of programming languages, addison wesley, 1996.
sebesta, robert w. concepts of programming languages. pearson education india, 2004.


== external links ==
history and evolution of programming languages
graph of programming language history