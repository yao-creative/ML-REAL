hilbert r-tree, an r-tree variant, is an index for multidimensional objects such as lines, regions, 3-d objects, or high-dimensional feature-based parametric objects. it can be thought of as an extension to b+-tree for multidimensional objects.
the performance of r-trees depends on the quality of the algorithm that clusters the data rectangles on a node. hilbert r-trees use space-filling curves, and specifically the hilbert curve, to impose a linear ordering on the data rectangles.
there are two types of hilbert r-trees: one for static databases, and one for dynamic databases. in both cases hilbert space-filling curves are used to achieve better ordering of multidimensional objects in the node. this ordering has to be "good", in the sense that it should group "similar" data rectangles together, to minimize the area and perimeter of the resulting minimum bounding rectangles (mbrs). packed hilbert r-trees are suitable for static databases in which updates are very rare or in which there are no updates at all.
the dynamic hilbert r-tree is suitable for dynamic databases where insertions, deletions, or updates may occur in real time. moreover, dynamic hilbert r-trees employ flexible deferred splitting mechanism to increase the space utilization. every node has a well defined set of sibling nodes. this is done by proposing an ordering on the r-tree nodes. the hilbert r-tree sorts rectangles according to the hilbert value of the center of the rectangles (i.e., mbr). (the hilbert value of a point is the length of the hilbert curve from the origin to the point.) given the ordering, every node has a well-defined set of sibling nodes; thus, deferred splitting can be used. by adjusting the split policy, the hilbert r-tree can achieve a degree of space utilization as high as desired. to the contrary, other r-tree variants have no control over the space utilization.


== the basic idea ==
although the following example is for a static environment, it explains the intuitive principles for good r-tree design. these principles are valid for both static and dynamic databases.
roussopoulos and leifker proposed a method for building a packed r-tree that achieves almost 100% space utilization. the idea is to sort the data on the x or y coordinate of one of the corners of the rectangles. sorting on any of the four coordinates gives similar results. in this discussion points or rectangles are sorted on the x coordinate of the lower left corner of the rectangle, referred to as a "lowx packed r-tree". the sorted list of rectangles is scanned; successive rectangles are assigned to the same r-tree leaf node until that node is full; a new leaf node is then created, and the scanning of the sorted list continues. thus, the nodes of the resulting r-tree will be fully packed, with the possible exception of the last node at each level. this leads to space utilization ≈100%. higher levels of the tree are created in a similar way.
figure 1 highlights the problem of the lowx packed r-tree. figure 1 [right] shows the leaf nodes of the r-tree that the lowx packing method will create for the points of figure 1 [left]. the fact that the resulting father nodes cover little area explains why the lowx packed r-tree achieves excellent performance for point queries. however, the fact that the fathers have large perimeters explains the degradation of performance for region queries. this is consistent with the analytical formulas for r-tree performance. intuitively, the packing algorithm should ideally assign nearby points to the same leaf node. ignorance of the y coordinate by the lowx packed r-tree tends to violate this empirical rule.
  
figure 1: [left] 200 points uniformly distributed; [right] mbr of nodes generated by the "lowx packed r-tree" algorithm
the section below describes two variants of the hilbert r-trees. the first index is suitable for the static database in which updates are very rare or in which there are no updates at all. the nodes of the resulting r-tree will be fully packed, with the possible exception of the last node at each level. thus, the space utilization is ≈100%; this structure is called a packed hilbert r-tree. the second index, called a dynamic hilbert r-tree, supports insertions and deletions, and is suitable for a dynamic environment.


== packed hilbert r-trees ==
the following provides a brief introduction to the hilbert curve. the basic hilbert curve on a 2x2 grid, denoted by h1 is shown in figure 2. to derive a curve of order i, each vertex of the basic curve is replaced by the curve of order i – 1, which may be appropriately rotated and/or reflected. figure 2 also shows the hilbert curves of order two and three. when the order of the curve tends to infinity, like other space filling curves, the resulting curve is a fractal, with a fractal dimension of two. the hilbert curve can be generalized for higher dimensionalities. algorithms for drawing the two-dimensional curve of a given order can be found in  and. an algorithm for higher dimensionalities is given in.the path of a space filling curve imposes a linear ordering on the grid points; this path may be calculated by starting at one end of the curve and following the path to the other end. the actual coordinate values of each point can be calculated. however, for the hilbert curve this is much harder than for example the z-order curve. figure 2 shows one such ordering for a 4x4 grid (see curve h2). for example, the point (0,0) on the h2 curve has a hilbert value of 0, while the point (1,1) has a hilbert value of 2. the hilbert value of a rectangle is defined as the hilbert value of its center.

figure 2: hilbert curves of order 1, 2, and 3
the hilbert curve imposes a linear ordering on the data rectangles and then traverses the sorted list, assigning each set of c rectangles to a node in the r-tree. the final result is that the set of data rectangles on the same node will be close to each other in the linear ordering, and most likely in the native space; thus, the resulting r-tree nodes will have smaller areas. figure 2 illustrates the intuitive reasons why our hilbert-based methods will result in good performance. the data is composed of points (the same points as given in figure 1). by grouping the points according to their hilbert values, the mbrs of the resulting r-tree nodes tend to be small square-like rectangles. this indicates that the nodes will likely have small area and small perimeters. small area values result in good performance for point queries; small area and small perimeter values lead to good performance for larger queries.


=== algorithm hilbert-pack ===
(packs rectangles into an r-tree)
step 1. calculate the hilbert value for each data rectangle
step 2. sort data rectangles on ascending hilbert values
step 3. 	 /* create leaf nodes (level l=0) */

while (there are more rectangles)
generate a new r-tree node
assign the next c rectangles to this nodestep 4. 	 /* create nodes at higher level (l + 1) */

while (there are > 1 nodes at level l)
sort nodes at level l ≥ 0 on ascending creation time
repeat step 3the assumption here is that the data are static or the frequency of modification is low. this is a simple heuristic for constructing an r-tree with ~100% space utilization which at the same time will have a good response time.


== dynamic hilbert r-trees ==
the performance of r-trees depends on the quality of the algorithm that clusters the data rectangles on a node. hilbert r-trees use space-filling curves, and specifically the hilbert curve, to impose a linear ordering on the data rectangles. the hilbert value of a rectangle is defined as the hilbert value of its center.


=== tree structure ===
the hilbert r-tree has the following structure. a leaf node contains at most
cl entries each of the form (r, obj _id) where cl is the capacity of the leaf, r is the mbr of the real object (xlow, xhigh, ylow, yhigh) and obj-id is a pointer to the object description record. the main difference between the hilbert r-tree and the r*-tree  is that non-leaf nodes also contain information about the lhvs (largest hilbert value). thus, a non-leaf node in the hilbert r-tree contains at most cn entries of the form (r, ptr, lhv) where cn is the capacity of a non-leaf node, r is the mbr that encloses all the children of that node, ptr is a pointer to the child node, and lhv is the largest hilbert value among the data rectangles enclosed by r. notice that since the non-leaf node picks one of the hilbert values of the children to be the value of its own lhv, there is not extra cost for calculating the hilbert values of the mbr of non-leaf nodes. figure 3 illustrates some rectangles organized in a hilbert r-tree. the hilbert values of the centers are the numbers near the "x" symbols (shown only for the parent node "ii"). the lhv's are in [brackets]. figure 4 shows how the tree of figure 3 is stored on the disk; the contents of the parent node "ii" are shown in more detail. every data rectangle in node "i" has a hilbert value v ≤33; similarly every rectangle in node "ii" has a hilbert value greater than 33 and ≤ 107, etc.

figure 3: data rectangles organized in a hilbert r-tree (hilbert values and largest hilbert values (lhvs) are in brackets)
a plain r-tree splits a node on overflow, creating two nodes from the original one. this policy is called a 1-to-2 splitting policy. it is possible also to defer the split, waiting until two nodes split into three. note that this is similar to the b*-tree split policy. this method is referred to as the 2-to-3 splitting policy.
in general, this can be extended to s-to-(s+1) splitting policy; where s is the order of the splitting policy. to implement the order-s splitting policy, the overflowing node tries to push some of its entries to one of its s - 1 siblings; if all of them are full, then s-to-(s+1) split need to be done. the s -1 siblings are called the cooperating siblings.
next, the algorithms for searching, insertion, and overflow handling are described in detail.


=== searching ===
the searching algorithm is similar to the one used in other r-tree variants. starting from the root, it descends the tree and examines all nodes that intersect the query rectangle. at the leaf level, it reports all entries that intersect the query window w as qualified data items.
algorithm search(node root, rect w):
s1. search nonleaf nodes:
invoke search for every entry whose mbr intersects the query window w.s2. search leaf nodes:
report all entries that intersect the query window w as candidates.
figure 4: the file structure for the hilbert r-tree


=== insertion ===
to insert a new rectangle r in the hilbert r-tree, the hilbert value h of the center of the new rectangle is used as a key. at each level the node with the minimum lhv value greater than h of all its siblings is chosen. when a leaf node is reached, the rectangle r is inserted in its correct order according to h. after a new rectangle is inserted in a leaf node n, adjusttree is called to fix the mbr and largest hilbert values in the upper-level nodes.
algorithm insert(node root, rect r):
/* inserts a new rectangle r in the hilbert r-tree. h is the hilbert value of the rectangle*/
i1. find the appropriate leaf node:
invoke chooseleaf(r, h) to select a leaf node l in which to place r.i2. insert r in a leaf node l:
if l has an empty slot, insert r in l in the
appropriate place according to the hilbert order and return.
if l is full, invoke handleoverflow(l,r), which
will return new leaf if split was inevitable,i3. propagate changes upward:

form a set s that contains l, its cooperating siblings
and the new leaf (if any)
invoke adjusttree(s).i4. grow tree taller:

if node split propagation caused the root to split, create
a new root whose children are the two resulting nodes.algorithm chooseleaf(rect r, int h):
/* returns the leaf node in which to place a new rectangle r. */
c1. initialize:

set n to be the root node.c2. leaf check:

if n is a leaf_ return n.c3. choose subtree:

if n is a non-leaf node, choose the entry (r, ptr, lhv)
with the minimum lhv value greater than h.c4. descend until a leaf is reached:

set n to the node pointed by ptr and repeat from c2.algorithm adjusttree(set s):
/* s is a set of nodes that contains the node being updated, its cooperating siblings (if overflow has occurred) and the newly created node nn (if split has occurred). the routine ascends from the leaf level towards the root, adjusting mbr and lhv of nodes that cover the nodes in s. it propagates splits (if any) */
a1. if root level is reached, stop.
a2. propagate node split upward:
let np be the parent node of n.
if n has been split, let nn be the new node.
insert nn in np in the correct order according to its hilbert
value if there is room. otherwise, invoke handleoverflow(np , nn ).
if np is split, let pp be the new node.a3. adjust the mbr's and lhv's in the parent level:

let p be the set of parent nodes for the nodes in s.
adjust the corresponding mbr's and lhv's of the nodes in p appropriately.a4. move up to next level:

let s become the set of parent nodes p, with
nn = pp, if np was split.
repeat from a1.


=== deletion ===
in the hilbert r-tree, there is no need to re-insert orphaned nodes whenever a father node underflows. instead, keys can be borrowed from the siblings or the underflowing node is merged with its siblings. this is possible because the nodes have a clear ordering (according to largest hilbert value, lhv); in contrast, in r-trees there is no such concept concerning sibling nodes. notice that deletion operations require s cooperating siblings, while insertion operations require s - 1 siblings.
algorithm delete(r):
d1. find the host leaf:
perform an exact match search to find the leaf node l
that contains r.d2. delete r :
remove r from node l.d3. if l underflows
borrow some entries from s cooperating siblings.
if all the siblings are ready to underflow.
merge s + 1 to s nodes,
adjust the resulting nodes.d4. adjust mbr and lhv in parent levels.
form a set s that contains l and its cooperating
siblings (if underflow has occurred).
invoke adjusttree(s).


=== overflow handling ===
the overflow handling algorithm in the hilbert r-tree treats the overflowing nodes either by moving some of the entries to one of the s - 1 cooperating siblings or by splitting s nodes into s +1 nodes.
algorithm handleoverflow(node n, rect r):
/* return the new node if a split occurred. */
h1. let ε be a set that contains all the entries from n 

and its s - 1 cooperating siblings.h2. add r to ε.
h3. if at least one of the s - 1 cooperating siblings is not full,

distribute ε evenly among the s nodes according to hilbert values.h4. if all the s cooperating siblings are full,

create a new node nn and
distribute ε evenly among the s + 1 nodes according
to hilbert values
return nn.


== notes ==


== references ==
i. kamel and c. faloutsos. parallel r-trees. in proc. of acm sigmod conf., pages 195–204 san diego, ca, june 1992. also available as tech. report umiacs tr 92-1, cs-tr-2820.
i. kamel and c. faloutsos. hilbert r-tree: an improved r-tree using fractals. in proc. of vldb conf., pages 500–509, santiago, chile, september 1994. also available as tech_ report umiacs tr 93-12.1 cs-tr-3032.1.
n. koudas, c. faloutsos and i. kamel. declustering spatial databases on a multi-computer architecture, international conference on extending database technology (edbt), pages 592–614, 1996.
n. roussopoulos and d. leifker. direct spatial search on pictorial databases using packed r-trees. in proc. of acm sigmod, pages 17–31, austin, tx, may 1985.
m. schroeder. fractals, chaos, power laws: minutes from an infinite paradise. w.h. freeman and company, ny, 1991.
t. sellis, n. roussopoulos, and c. faloutsos. the r+-tree: a dynamic index for multi-dimensional objects. in proc. 13th international conference on vldb, pages 507–518, england, september 1987.