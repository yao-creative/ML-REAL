the term scheduling analysis in real-time computing includes the analysis and testing of the scheduler system and the algorithms used in real-time applications. in computer science, real-time scheduling analysis is the evaluation, testing and verification of the scheduling system and the algorithms used in real-time operations. for critical operations, a real-time system must be tested and verified for performance. 
a real-time scheduling system is composed of the scheduler, clock and the processing hardware elements. in a real-time system, a process or task has schedulability; tasks are accepted by a real-time system and completed as specified by the task deadline depending on the characteristic of the scheduling algorithm. modeling and evaluation of a real-time scheduling system concern is on the analysis of the algorithm capability to meet a process deadline. a deadline is defined as the time required for a task to be processed.
for example, in a real-time scheduling algorithm a deadline could be set to five nano-seconds. in a critical operation the task must be processed in the time specified by the deadline (i.e. five nano-seconds). a task in a real-time system must be completed “neither too early nor too late;..”. a system is said to be unschedulable when tasks can not meet the specified deadlines. a task can be classified as either a periodic or aperiodic process.


== classifications ==
the criteria of a real-time can be classified as hard, firm or soft. the scheduler set the algorithms for executing tasks according to a specified order. there are multiple mathematical models to represent a scheduling system, most implementations of real-time scheduling algorithm are modeled for the implementation of uniprocessors or multiprocessors configurations. the more challenging scheduling algorithm is found in multiprocessors, it is not always feasible to implement a uniprocessor scheduling algorithm in a multiprocessor. the algorithms used in scheduling analysis “can be classified as pre-emptive or non-pre-emptive".a scheduling algorithm defines how tasks are processed by the scheduling system. in general terms, in the algorithm for a real-time scheduling system, each task is assigned a description, deadline and an identifier (indicating priority). the selected scheduling algorithm determines how priorities are assigned to a particular task. a real-time scheduling algorithm can be classified as static or dynamic. for a static scheduler, task priorities are determined before the system runs. a dynamic scheduler determines task priorities as it runs.
tasks are accepted by the hardware elements in a real-time scheduling system from the computing environment and processed in real-time. an output signal indicates the processing status. a task deadline indicates the time set to complete for each task. 
it is not always possible to meet the required deadline; hence further verification of the scheduling algorithm must be conducted.   two different models can be implemented using a dynamic scheduling algorithm; a task deadline can be assigned according to the task priority (earliest deadline) or a completion time for each task is assigned by subtracting the processing time from the deadline (least laxity). deadlines and the required task execution time must be understood in advance to ensure the effective use of the processing elements execution times.


== testing and verification ==
the performance verification and execution of a real-time scheduling algorithm is performed by the analysis of the algorithm execution times. verification for the performance of a real-time scheduler will require testing the scheduling algorithm under different test scenarios including the worst-case execution time. these testing scenarios include worst case and unfavorable cases to assess the algorithm performance. the time calculations required for the analysis of scheduling systems requires evaluating the algorithm at the code level.different methods can be applied to testing a scheduling system in a real-time system. some methods include: input/output verifications and code analysis. one method is by testing each input condition and performing observations of the outputs. depending on the number of inputs this approach could result in a lot of effort.  another faster and more economical method is a risk based approach where representative critical inputs are selected for testing. this method is more economical but could result in less than optimal conclusions over the validity of the system if the incorrect approach is used. retesting requirements after changes to the scheduling system are considered in a case by case basis.
testing and verification of real-time systems should not be limited to input/output and codes verifications but are performed also in running applications using intrusive or non-intrusive methods.


== see also ==
pinwheel scheduling
preemptive scheduling


== references ==


== external links ==
ieee technical committee on real-time systems
real-time computing (elsevier topic)
https://www.cs.rutgers.edu/~pxk/416/notes/08-rt_scheduling.html
rt.js: practical real-time scheduling for web applications