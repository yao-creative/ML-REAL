in information technology a reasoning system is a software system that generates conclusions from available knowledge using logical techniques such as deduction and induction. reasoning systems play an important role in the implementation of artificial intelligence and knowledge-based systems.
by the everyday usage definition of the phrase, all computer systems are reasoning systems in that they all automate some type of logic or decision. in typical use in the information technology field however, the phrase is usually reserved for systems that perform more complex kinds of reasoning. for example, not for systems that do fairly straightforward types of reasoning such as calculating a sales tax or customer discount but making logical inferences about a medical diagnosis or mathematical theorem. reasoning systems come in two modes: interactive and batch processing. interactive systems interface with the user to ask clarifying questions or otherwise allow the user to guide the reasoning process. batch systems take in all the available information at once and generate the best answer possible without user feedback or guidance.reasoning systems have a wide field of application that includes scheduling, business rule processing, problem solving, complex event processing, intrusion detection, predictive analytics, robotics, computer vision, and natural language processing.


== history ==
the first reasoning systems were theorem provers, systems that represent axioms and statements in first order logic and then use rules of logic such as modus ponens to infer new statements. another early type of reasoning system were general problem solvers. these were systems such as the general problem solver designed by newell and simon. general problem solvers attempted to provide a generic planning engine that could represent and solve structured problems. they worked by decomposing problems into smaller more manageable sub-problems, solving each sub-problem and assembling the partial answers into one final answer. another example general problem solver was the soar family of systems.
in practice these theorem provers and general problem solvers were seldom useful for practical applications and required specialized users with knowledge of logic to utilize. the first practical application of automated reasoning were expert systems. expert systems focused on much more well defined domains than general problem solving such as medical diagnosis or analyzing faults in an aircraft. expert systems also focused on more limited implementations of logic. rather than attempting to implement the full range of logical expressions they typically focused on modus-ponens implemented via if-then rules. focusing on a specific domain and allowing only a restricted subset of logic improved the performance of such systems so that they were practical for use in the real world and not merely as research demonstrations as most previous automated reasoning systems had been. the engine used for automated reasoning in expert systems were typically called inference engines. those used for more general logical inferencing are typically called theorem provers.with the rise in popularity of expert systems many new types of automated reasoning were applied to diverse problems in government and industry. some such as case-based reasoning were off shoots of expert systems research. others such as constraint satisfaction algorithms were also influenced by fields such as decision technology and linear programming. also, a completely different approach, one not based on symbolic reasoning but on a connectionist model has also been extremely productive. this latter type of automated reasoning is especially well suited to pattern matching and signal detection types of problems such as text searching and face matching.


== use of logic ==
the term reasoning system can be used to apply to just about any kind of sophisticated decision support system as illustrated by the specific areas described below. however, the most common use of the term reasoning system implies the computer representation of logic.  various implementations demonstrate significant variation in terms of systems of logic and formality. most reasoning systems implement variations of propositional and symbolic (predicate) logic.  these variations may be mathematically precise representations of formal logic systems (e.g., fol), or extended and hybrid versions of those systems (e.g., courteous logic).   reasoning systems may explicitly implement additional logic types (e.g., modal, deontic, temporal logics).  however, many reasoning systems implement imprecise and semi-formal approximations to recognised logic systems.  these systems typically support a variety of procedural and semi-declarative techniques in order to model different reasoning strategies.  they emphasise pragmatism over formality and may depend on custom extensions and attachments in order to solve real-world problems.
many reasoning systems employ deductive reasoning to draw inferences from available knowledge.  these inference engines support forward reasoning or backward reasoning to infer conclusions via modus ponens.   the recursive reasoning methods they employ are termed ‘forward chaining’ and ‘backward chaining’, respectively. although reasoning systems widely support deductive inference, some systems employ abductive, inductive, defeasible and other types of reasoning. heuristics may also be employed to determine acceptable solutions to intractable problems.
reasoning systems may employ the closed world assumption (cwa) or open world assumption (owa).  the owa is often associated with ontological knowledge representation and the semantic web.   different systems exhibit a variety of approaches to negation.  as well as logical or bitwise complement, systems may support existential forms of strong and weak negation including negation-as-failure and ‘inflationary’ negation (negation of non-ground atoms).   different reasoning systems may support monotonic or non-monotonic reasoning, stratification and other logical techniques.


== reasoning under uncertainty ==
many reasoning systems provide capabilities for reasoning under uncertainty. this is important when building situated reasoning agents which must deal with uncertain representations of the world.  there are several common approaches to handling uncertainty.  these include the use of certainty factors, probabilistic methods such as bayesian inference or dempster–shafer theory, multi-valued (‘fuzzy’) logic and various connectionist approaches.


== types of reasoning system ==
this section provides a non-exhaustive and informal categorisation of common types of reasoning system.  these categories are not absolute.  they overlap to a significant degree and share a number of techniques, methods and algorithms.


=== constraint solvers ===
constraint solvers solve constraint satisfaction problems (csps). they support constraint programming.  a constraint is a which must be met by any valid solution to a problem. constraints are defined declaratively and applied to variables within given domains. constraint solvers use search, backtracking and constraint propagation techniques to find solutions and determine optimal solutions. they may employ forms of linear and nonlinear programming. they are often used to perform optimization within highly combinatorial problem spaces. for example, they may be used to calculate optimal scheduling, design efficient integrated circuits or maximise productivity in a manufacturing process.


=== theorem provers ===
theorem provers use automated reasoning techniques to determine proofs of mathematical theorems. they may also be used to verify existing proofs. in addition to academic use, typical applications of theorem provers include verification of the correctness of integrated circuits, software programs, engineering designs, etc.


=== logic programs ===
logic programs (lps) are software programs written using programming languages whose primitives and expressions provide direct representations of constructs drawn from mathematical logic.  an example of a general-purpose logic programming language is prolog.  lps represent the direct application of logic programming to solve problems.   logic programming is characterised by highly declarative approaches based on formal logic, and has wide application across many disciplines.


=== rule engines ===
rule engines represent conditional logic as discrete rules. rule sets can be managed and applied separately to other functionality. they have wide applicability across many domains.  many rule engines implement reasoning capabilities. a common approach is to implement production systems to support forward or backward chaining. each rule (‘production’) binds a conjunction of predicate clauses to a list of executable actions.
at run-time, the rule engine matches productions against facts and executes (‘fires’) the associated action list for each match. if those actions remove or modify any facts, or assert new facts, the engine immediately re-computes the set of matches.  rule engines are widely used to model and apply business rules, to control decision-making in automated processes and to enforce business and technical policies.


=== deductive classifier ===
deductive classifiers arose slightly later than rule-based systems and were a component of a new type of artificial intelligence knowledge representation tool known as frame languages. a frame language describes the problem domain as a set of classes, subclasses, and relations among the classes. it is similar to the object-oriented model. unlike object-oriented models however, frame languages have a formal semantics based on first order logic. 
they utilize this semantics to provide input to the deductive classifier. the classifier in turn can analyze a given model (known as an ontology) and determine if the various relations described in the model are consistent. if the ontology is not consistent the classifier will highlight the declarations that are inconsistent. if the ontology is consistent the classifier can then do further reasoning and draw additional conclusions about the relations of the objects in the ontology. 
for example, it may determine that an object is actually a subclass or instance of additional classes as those described by the user. classifiers are an important technology in analyzing the ontologies used to describe models in the semantic web.


=== machine learning systems ===
machine learning systems evolve their behavior over time based on experience.   this may involve reasoning over observed events or example data provided for training purposes. for example, machine learning systems may use inductive reasoning to generate hypotheses for observed facts.  learning systems search for generalised rules or functions that yield results in line with observations and then use these generalisations to control future behavior.


=== case-based reasoning systems ===
case-based reasoning (cbr) systems provide solutions to problems by analysing similarities to other problems for which known solutions already exist.  they use analogical reasoning to infer solutions based on case histories.  cbr systems are commonly used in customer/technical support and call centre scenarios and have applications in industrial manufacture, agriculture, medicine, law and many other areas.


=== procedural reasoning systems ===
a procedural reasoning system (prs) uses reasoning techniques to select plans from a procedural knowledge base. each plan represents a course of action for achievement of a given goal. the prs implements a belief-desire-intention model by reasoning over facts (‘beliefs’) to select appropriate plans (‘intentions’) for given goals (‘desires’). typical applications of prs include management, monitoring and fault detection systems.


== references ==