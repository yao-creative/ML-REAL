in linguistics, optimality theory (frequently abbreviated ot) is a linguistic model proposing that the observed forms of language arise from the optimal satisfaction of conflicting constraints. ot differs from other approaches to phonological analysis, such as autosegmental phonology and linear phonology (spe), which typically use rules rather than constraints. ot models grammars as systems that provide mappings from inputs to outputs; typically, the inputs are conceived of as underlying representations, and the outputs as their surface realizations. it is an approach within the larger framework of generative grammar.
in linguistics, optimality theory has its origin in a talk given by alan prince and paul smolensky in 1991 which was later developed in a book manuscript by the same authors in 1993.


== overview ==
there are three basic components of the theory:

generator (gen) takes an input, and generates the list of possible outputs, or candidates,
constraint component (con) provides the criteria, in the form of strictly ranked violable constraints, used to decide between candidates, and
evaluator (eval) chooses the optimal candidate based on the constraints, and this candidate is the output.optimality theory assumes that these components are universal. differences in grammars reflect different rankings of the universal constraint set, con. part of language acquisition can then be described as the process of adjusting the ranking of these constraints.
optimality theory as applied to language was originally proposed by the linguists alan prince and paul smolensky in 1991, and later expanded by prince and john j. mccarthy. although much of the interest in optimality theory has been associated with its use in phonology, the area to which optimality theory was first applied, the theory is also applicable to other subfields of linguistics (e.g. syntax and semantics).
optimality theory is like other theories of generative grammar in its focus on the investigation of universal principles, linguistic typology and language acquisition.
optimality theory also has roots in neural network research. it arose in part as an alternative to the connectionist theory of harmonic grammar, developed in 1990 by géraldine legendre, yoshiro miyata and paul smolensky. variants of optimality theory with connectionist-like weighted constraints continue to be pursued in more recent work (pater 2009).


== input and gen: the candidate set ==
optimality theory supposes that there are no language-specific restrictions on the input. this is called richness of the base. every grammar can handle every possible input. for example, a language without complex clusters must be able to deal with an input such as /flask/. languages without complex clusters differ on how they will resolve this problem; some will epenthesize (e.g. [falasak], or [falasaka] if all codas are banned) and some will delete (e.g. [fas], [fak], [las], [lak]).
gen is free to generate any number of output candidates, however much they deviate from the input. this is called freedom of analysis. the grammar (ranking of constraints) of the language determines which of the candidates will be assessed as optimal by eval.


== con: the constraint set ==
in optimality theory, every constraint is universal. con is the same in every language. there are two basic types of constraints:

faithfulness constraints require that the observed surface form (the output) match the underlying or lexical form (the input) in some particular way; that is, these constraints require identity between input and output forms.
markedness constraints impose requirements on the structural well-formedness of the output.each plays a crucial role in the theory. markedness constraints motivate changes from the underlying form, and faithfulness constraints prevent every input from being realized as some completely unmarked form (such as [ba]).
the universal nature of con makes some immediate predictions about language typology. if grammars differ only by having different rankings of con, then the set of possible human languages is determined by the constraints that exist. optimality theory predicts that there cannot be more grammars than there are permutations of the ranking of con. the number of possible rankings is equal to the factorial of the total number of constraints, thus giving rise to the term factorial typology. however, it may not be possible to distinguish all of these potential grammars, since not every constraint is guaranteed to have an observable effect in every language. two total orders on the constraints of con could generate the same range of input–output mappings, but differ in the relative ranking of two constraints which do not conflict with each other. since there is no way to distinguish these two rankings they are said to belong to the same grammar. a grammar in ot is equivalent to an antimatroid (merchant & riggle 2016). if rankings with ties are allowed, then the number of possibilities is an ordered bell number rather than a factorial, allowing a significantly larger number of possibilities.


=== faithfulness constraints ===
mccarthy & prince (1995) propose three basic families of faithfulness constraints:

max prohibits deletion (from "maximal").
dep prohibits epenthesis (from "dependent").
ident(f) prohibits alteration to the value of feature f (from "identical").each of the constraints' names may be suffixed with "-io" or "-br", standing for input/output and base/reduplicant, respectively—the latter of which is used in analysis of reduplication—if desired. f in ident(f) is substituted by the name of a distinctive feature, as in ident-io(voice).
max and dep replace parse and fill proposed by prince & smolensky (1993), which stated "underlying segments must be parsed into syllable structure" and "syllable positions must be filled with underlying segments", respectively. parse and fill serve essentially the same functions as max and dep, but differ in that they evaluate only the output and not the relation between the input and output, which is rather characteristic of markedness constraints. this stems from the model adopted by prince & smolensky known as containment theory, which assumes the input segments unrealized by the output are not removed but rather "left unparsed" by a syllable. the model put forth by mccarthy & prince (1995, 1999), known as correspondence theory, has since replaced it as the standard framework.mccarthy & prince (1995) also propose:

i-contig, violated when a word- or morpheme-internal segment is deleted (from "input-contiguity");
o-contig, violated when a segment is inserted word- or morpheme-internally (from "output-contiguity");
linearity, violated when the order of some segments is changed (i.e. prohibits metathesis);
uniformity, violated when two or more segments are realized as one (i.e. prohibits fusion); and
integrity, violated when a segment is realized as multiple segments (i.e. prohibits unpacking or vowel breaking—opposite of uniformity).


=== markedness constraints ===
markedness constraints introduced by prince & smolensky (1993) include:

precise definitions in literature vary. some constraints are sometimes used as a "cover constraint", standing in for a set of constraints that are not fully known or important.some markedness constraints are context-free and others are context-sensitive. for example, *vnasal states that vowels must not be nasal in any position and is thus context-free, whereas *voraln states that vowels must not be oral when preceding a tautosyllabic nasal and is thus context-sensitive.


=== alignment constraints ===


=== local conjunctions ===
two constraints may be conjoined as a single constraint, called a local conjunction, which gives only one violation each time both constraints are violated within a given domain, such as a segment, syllable or word. for example, [nocoda & vop]segment is violated once per voiced obstruent in a coda ("vop" stands for "voiced obstruent prohibition"), and may be equivalently written as *voicedcoda. local conjunctions are used as a way of circumventing the problem of phonological opacity that arises when analyzing chain shifts.


== eval: definition of optimality ==
in the original proposal, given two candidates, a and b, a is better, or more "harmonic", than b on a constraint if a incurs fewer violations than b. candidate a is more harmonic than b on an entire constraint hierarchy if a incurs fewer violations of the highest-ranked constraint distinguishing a and b. a is "optimal" in its candidate set if it is better on the constraint hierarchy than all other candidates. however, this definition of eval is able to model relations that exceed regularity.for example, given the constraints c1, c2, and c3, where c1 dominates c2, which dominates c3 (c1 ≫ c2 ≫ c3), a beats b, or is more harmonic than b, if a has fewer violations than b on the highest ranking constraint which assigns them a different number of violations (a is "optimal" if a beats b and the candidate set comprises only a and b). if a and b tie on c1, but a does better than b on c2, a is optimal, even if a has however many more violations of c3 than b does. this comparison is often illustrated with a tableau. the pointing finger marks the optimal candidate, and each cell displays an asterisk for each violation for a given candidate and constraint. once a candidate does worse than another candidate on the highest ranking constraint distinguishing them, it incurs a fatal violation (marked in the tableau by an exclamation mark and by shaded cells for the lower-ranked constraints). once a candidate incurs a fatal violation, it cannot be optimal, even if it outperforms the other candidates on the rest of con.

other notational conventions include dotted lines separating columns of unranked or equally ranked constraints, a check mark ✔ in place of a finger in tentatively ranked tableaux (denoting harmonic but not conclusively optimal), and a circled asterisk ⊛ denoting a violation by a winner; in output candidates, the angle brackets ⟨ ⟩ denote segments elided in phonetic realization, and □ and □́ denote an epenthetic consonant and vowel, respectively. the "much greater than" sign ≫ (sometimes the nested ⪢) denotes the domination of a constraint over another ("c1 ≫ c2" = "c1 dominates c2") while the "succeeds" operator ≻ denotes superior harmony in comparison of output candidates ("a ≻ b" = "a is more harmonic than b").constraints are ranked in a hierarchy of strict domination. the strictness of strict domination means that a candidate which violates only a high-ranked constraint does worse on the hierarchy than one that does not, even if the second candidate fared worse on every other lower-ranked constraint. this also means that constraints are violable; the winning (i.e. the most harmonic) candidate need not satisfy all constraints, as long as for any rival candidate that does better than the winner on some constraint, there is a higher-ranked constraint on which the winner does better than that rival. within a language, a constraint may be ranked high enough that it is always obeyed; it may be ranked low enough that it has no observable effects; or, it may have some intermediate ranking. the term the emergence of the unmarked describes situations in which a markedness constraint has an intermediate ranking, so that it is violated in some forms, but nonetheless has observable effects when higher-ranked constraints are irrelevant.
an early example proposed by mccarthy & prince (1994) is the constraint nocoda, which prohibits syllables from ending in consonants. in balangao, nocoda is not ranked high enough to be always obeyed, as witnessed in roots like taynan (faithfulness to the input prevents deletion of the final /n/). but, in the reduplicated form ma-tayna-taynan 'repeatedly be left behind', the final /n/ is not copied. under mccarthy & prince's analysis, this is because faithfulness to the input does not apply to reduplicated material, and nocoda is thus free to prefer ma-tayna-taynan over hypothetical ma-taynan-taynan (which has an additional violation of nocoda).
some optimality theorists prefer the use of comparative tableaux, as described in prince (2002b). comparative tableaux display the same information as the classic or "flyspeck" tableaux, but the information is presented in such a way that it highlights the most crucial information. for instance, the tableau above would be rendered in the following way.

each row in a comparative tableau represents a winner–loser pair, rather than an individual candidate. in the cells where the constraints assess the winner–loser pairs, "w" is placed if the constraint in that column prefers the winner, "l" if the constraint prefers the loser, and "e" if the constraint does not differentiate between the pair. presenting the data in this way makes it easier to make generalizations. for instance, in order to have a consistent ranking some w must dominate all l's. brasoveanu and prince (2005) describe a process known as fusion and the various ways of presenting data in a comparative tableau in order to achieve the necessary and sufficient conditions for a given argument.


== example ==
as a simplified example, consider the manifestation of the english plural:

/dɒɡ/ + /z/ → [dɒɡz] (dogs)
/kæt/ + /z/ → [kæts] (cats)
/dɪʃ/ + /z/ → [dɪʃɪz] (dishes)also consider the following constraint set, in descending order of domination:

no matter how the constraints are re-ordered, the allomorph [ɪs] will always lose to [ɪz]. this is called harmonic bounding. the violations incurred by the candidate [dɒɡɪz] are a subset of the violations incurred by [dɒɡɪs]; specifically, if you epenthesize a vowel, changing the voicing of the morpheme is a gratuitous violation of constraints. in the /dɒɡ/ + /z/ tableau, there is a candidate [dɒɡz] which incurs no violations whatsoever. within the constraint set of the problem, [dɒɡz] harmonically bounds all other possible candidates. this shows that a candidate does not need to be a winner in order to harmonically bound another candidate.
the tableaux from above are repeated below using the comparative tableaux format.

from the comparative tableau for /dɒɡ/ + /z/, it can be observed that any ranking of these constraints will produce the observed output [dɒɡz]. because there are no loser-preferring comparisons, [dɒɡz] wins under any ranking of these constraints; this means that no ranking can be established on the basis of this input.
the tableau for /kæt/ + /z/ contains rows with a single w and a single l. this shows that agree, max, and dep must all dominate ident; however, no ranking can be established between those constraints on the basis of this input. based on this tableau, the following ranking has been established

agree, max, dep ≫ ident.the tableau for /dɪʃ/ + /z/ shows that several more rankings are necessary in order to predict the desired outcome. the first row says nothing; there is no loser-preferring comparison in the first row. the second row reveals that either *ss or agree must dominate dep, based on the comparison between [dɪʃɪz] and [dɪʃz]. the third row shows that max must dominate dep. the final row shows that either *ss or ident must dominate dep. from the /kæt/ + /z/ tableau, it was established that dep dominates ident; this means that *ss must dominate dep.
so far, the following rankings have been shown to be necessary:

*ss, max ≫ dep ≫ identwhile it is possible that agree can dominate dep, it is not necessary; the ranking given above is sufficient for the observed for [dɪʃɪz] to emerge.
when the rankings from the tableaux are combined, the following ranking summary can be given:

*ss, max ≫ agree, dep ≫ ident
or
*ss, max, agree ≫ dep ≫ identthere are two possible places to put agree when writing out rankings linearly; neither is truly accurate. the first implies that *ss and max must dominate agree, and the second implies that agree must dominate dep. neither of these are truthful, which is a failing of writing out rankings in a linear fashion like this. these sorts of problems are the reason why most linguists utilize a lattice graph to represent necessary and sufficient rankings, as shown below.

a diagram that represents the necessary rankings of constraints in this style is a hasse diagram.


== criticism ==
optimality theory has attracted substantial amounts of criticism, most of which is directed at its application to phonology (rather than syntax or other fields).it is claimed that optimality theory cannot account for phonological opacity (see idsardi 2000, for example). in derivational phonology, effects that are inexplicable at the surface level but are explainable through "opaque" rule ordering may be seen; but in optimality theory, which has no intermediate levels for rules to operate on, these effects are difficult to explain.
for example, in quebec french, high front vowels triggered affrication of /t/, (e.g. /tipik/ → [tˢpɪk]), but the loss of high vowels (visible at the surface level) has left the affrication with no apparent source. derivational phonology can explain this by stating that vowel syncope (the loss of the vowel) "counterbled" affrication—that is, instead of vowel syncope occurring and "bleeding" (i.e. preventing) affrication, it says that affrication applies before vowel syncope, so that the high vowel is removed and the environment destroyed which had triggered affrication. such counterbleeding rule orderings are therefore termed opaque (as opposed to transparent), because their effects are not visible at the surface level.
the opacity of such phenomena finds no straightforward explanation in optimality theory, since theoretical intermediate forms are not accessible (constraints refer only to the surface form and/or the underlying form). there have been a number of proposals designed to account for it, but most of the proposals significantly alter optimality theory's basic architecture and therefore tend to be highly controversial. frequently, such alterations add new types of constraints (which are not universal faithfulness or markedness constraints), or change the properties of gen (such as allowing for serial derivations) or eval. examples of these include john j. mccarthy's sympathy theory and candidate chains theory, among many others.
a relevant issue is the existence of circular chain shifts, i.e. cases where input /x/ maps to output [y], but input /y/ maps to output [x]. many versions of optimality theory predict this to be impossible (see moreton 2004, prince 2007).
optimality theory is also criticized as being an impossible model of speech production/perception: computing and comparing an infinite number of possible candidates would take an infinitely long time to process. idsardi (2006) argues this position, though other linguists dispute this claim on the grounds that idsardi makes unreasonable assumptions about the constraint set and candidates, and that more moderate instantiations of optimality theory do not present such significant computational problems (see kornai (2006) and heinz, kobele & riggle (2009)). another common rebuttal to this criticism of optimality theory is that the framework is purely representational. in this view, optimality theory is taken to be a model of linguistic competence and is therefore not intended to explain the specifics of linguistic performance.another objection to optimality theory is that it is not technically a theory, in that it does not make falsifiable predictions. the source of this issue may be in terminology: the term theory is used differently here than in physics, chemistry, and other sciences. specific instantiations of optimality theory may make falsifiable predictions, in the same way specific proposals within other linguistic frameworks can. what predictions are made, and whether they are testable, depends on the specifics of individual proposals (most commonly, this is a matter of the definitions of the constraints used in an analysis). thus, optimality theory as a framework is best described as a scientific paradigm.


== theories within optimality theory ==
in practice, implementations of optimality theory often assume other related concepts, such as the syllable, the mora, or feature geometry. completely distinct from these, there are sub-theories which have been proposed entirely within optimality theory, such as positional faithfulness theory, correspondence theory (mccarthy & prince 1995), sympathy theory, stratal ot, and a number of theories of learnability, most notably by bruce tesar.
there are also a range of theories specifically about optimality theory. these are concerned with issues like the possible formulations of constraints, and constraint interactions other than strict domination.


== use outside of phonology ==
optimality theory is most commonly associated with the field of phonology, but has also been applied to other areas of linguistics. jane grimshaw, geraldine legendre and joan bresnan have developed instantiations of the theory within syntax. optimality theoretic approaches are also relatively prominent in morphology (and the morphology–phonology interface in particular).in the domain of semantics, optimality theory is less commonly used. but constraint-based systems have been developed to provide a formal model of interpretation, see, e.g., hendriks & de hoop 2001.for orthography, constraint-based analyses have also been proposed, among others, by richard wiese and silke hamann/ilaria colombo. constraints cover both the relations between sound and letter as well as preferences for spelling itself.


== notes ==


== references ==


== external links ==
rutgers university optimality archive
optimality theory and the three laws of robotics
ot syntax: an interview with jane grimshaw