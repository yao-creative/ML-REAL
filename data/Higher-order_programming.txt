higher-order programming is a style of computer programming that uses software components, like functions, modules or objects, as values. it is usually instantiated with, or borrowed from, models of computation such as lambda calculus which make heavy use of higher-order functions. a programming language can be considered higher-order if components, such as procedures or labels, can be used just like data. for example, these elements could be used in the same way as arguments or values.for example, in higher-order programming, one can pass functions as arguments to other functions and functions can be the return value of other functions (such as in macros or for interpreting). this style of programming is mostly used in functional programming, but it can also be very useful in object-oriented programming.  a slightly different interpretation of higher-order programming in the context of object-oriented programming are higher order messages, which let messages have other messages as arguments, rather than functions.
prominent examples of languages supporting this are wolfram language, c#, java, ecmascript (actionscript, javascript, jscript), f#, haskell, lisp (common lisp, scheme, clojure, others), lua, oz, perl, php, prolog, python, ruby, smalltalk, scala, ml, and erlang.


== see also ==
prolog#higher-order programming
higher-order logic programming


== references ==


== external links ==
"higher order programming" by sjoerd visscher (uses javascript as example language)