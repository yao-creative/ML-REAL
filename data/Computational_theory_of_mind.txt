in philosophy of mind, the computational theory of mind (ctm), also known as computationalism, is a family of views that hold that the human mind is an information processing system and that cognition and consciousness together are a form of computation. warren mcculloch and walter pitts (1943) were the first to suggest that neural activity is computational. they argued that neural computations explain cognition. the theory was proposed in its modern form by hilary putnam in 1967, and developed by his phd student, philosopher, and cognitive scientist jerry fodor in the 1960s, 1970s, and 1980s. despite being vigorously disputed in analytic philosophy in the 1990s due to work by putnam himself, john searle, and others, the view is common in modern cognitive psychology and is presumed by many theorists of evolutionary psychology. in the 2000s and 2010s the view has resurfaced in analytic philosophy (scheutz 2003, edelman 2008).the computational theory of mind holds that the mind is a computational system that is realized (i.e. physically implemented) by neural activity in the brain. the theory can be elaborated in many ways and varies largely based on how the term computation is understood. computation is commonly understood in terms of turing machines which manipulate symbols according to a rule, in combination with the internal state of the machine. the critical aspect of such a computational model is that we can abstract away from particular physical details of the machine that is implementing the computation. for example, the appropriate computation could be implemented either by silicon chips or biological neural networks, so long as there is a series of outputs based on manipulations of inputs and internal states, performed according to a rule. ctm, therefore holds that the mind is not simply analogous to a computer program, but that it is literally a computational system.computational theories of mind are often said to require mental representation because 'input' into a computation comes in the form of symbols or representations of other objects. a computer cannot compute an actual object but must interpret and represent the object in some form and then compute the representation. the computational theory of mind is related to the representational theory of mind in that they both require that mental states are representations. however, the representational theory of mind shifts the focus to the symbols being manipulated. this approach better accounts for systematicity and productivity. in fodor's original views, the computational theory of mind is also related to the language of thought. the language of thought theory allows the mind to process more complex representations with the help of semantics. (see below in semantics of mental states).
recent work has suggested that we make a distinction between the mind and cognition. building from the tradition of mcculloch and pitts, the computational theory of cognition (ctc) states that neural computations explain cognition. the computational theory of mind asserts that not only cognition, but also phenomenal consciousness or qualia, are computational. that is to say, ctm entails ctc. while phenomenal consciousness could fulfill some other functional role, computational theory of cognition leaves open the possibility that some aspects of the mind could be non-computational. ctc, therefore, provides an important explanatory framework for understanding neural networks, while avoiding counter-arguments that center around phenomenal consciousness.


== "computer metaphor" ==
computational theory of mind is not the same as the computer metaphor, comparing the mind to a modern-day digital computer. computational theory just uses some of the same principles as those found in digital computing. while the computer metaphor draws an analogy between the mind as software and the brain as hardware, ctm is the claim that the mind is a computational system. more specifically, it states that a computational simulation of a mind is sufficient for the actual presence of a mind, and that a mind truly can be simulated computationally.
'computational system' is not meant to mean a modern-day electronic computer. rather, a computational system is a symbol manipulator that follows step-by-step functions to compute input and form output. alan turing describes this type of computer in his concept of a turing machine.


== early proponents ==
one of the earliest proponents of the computational theory of mind was thomas hobbes, who said, "by reasoning, i understand computation. and to compute is to collect the sum of many things added together at the same time, or to know the remainder when one thing has been taken from another. to reason, therefore, is the same as to add or to subtract." since hobbes lived before the contemporary identification of computing with instantiating effective procedures, he cannot be interpreted as explicitly endorsing the computational theory of mind, in the contemporary sense.


== causal picture of thoughts ==
at the heart of the computational theory of mind is the idea that thoughts are a form of computation, and a computation is by definition a systematic set of rules for the relations among representations. this means that a mental state represents something if and only if there is some causal correlation between the mental state and that particular thing. an example would be seeing dark clouds and thinking "clouds mean rain", where there is a correlation between the thought of the clouds and rain, as the clouds causing rain.  this is sometimes known as natural meaning. conversely, there is another side to the causality of thoughts and that is the non-natural representation of thoughts. an example would be seeing a red traffic light and thinking "red means stop", there is nothing about the color red that indicates it represents stopping, and thus is just a convention that has been invented, similar to languages and their abilities to form representations.


== semantics of mental states ==
the computational theory of mind states that the mind functions as a symbolic operator, and that mental representations are symbolic representations; just as the semantics of language are the features of words and sentences that relate to their meaning, the semantics of mental states are those meanings of representations, the definitions of the 'words' of the language of thought. if these basic mental states can have a particular meaning just as words in a language do, then this means that more complex mental states (thoughts) can be created, even if they have never been encountered before. just as new sentences that are read can be understood even if they have never been encountered before, as long as the basic components are understood, and it is syntactically correct. for example: "i have eaten plum pudding every day of this fortnight." while it's doubtful many have seen this particular configuration of words, nonetheless, most readers should be able to glean an understanding of this sentence because it is syntactically correct and the constituent parts are understood.


== criticism ==
a range of arguments have been proposed against physicalist conceptions used in computational theories of mind.
an early, though indirect, criticism of the computational theory of mind comes from philosopher john searle.  in his thought experiment known as the chinese room, searle attempts to refute the claims that artificially intelligent agents can be said to have intentionality and understanding and that these systems, because they can be said to be minds themselves, are sufficient for the study of the human mind.  searle asks us to imagine that there is a man in a room with no way of communicating with anyone or anything outside of the room except for a piece of paper with symbols written on it that is passed under the door.  with the paper, the man is to use a series of provided rule books to return paper containing different symbols.  unknown to the man in the room, these symbols are of a chinese language, and this process generates a conversation that a chinese speaker outside of the room can actually understand. searle contends that the man in the room does not understand the chinese conversation.  this is essentially what the computational theory of mind presents us—a model in which the mind simply decodes symbols and outputs more symbols.  searle argues that this is not real understanding or intentionality.  this was originally written as a repudiation of the idea that computers work like minds.
searle has further raised questions about what exactly constitutes a computation:

the wall behind my back is right now implementing the wordstar program, because there is some pattern of molecule movements that is isomorphic with the formal structure of wordstar. but if the wall is implementing wordstar, if it is a big enough wall it is implementing any program, including any program implemented in the brain.

objections like searle's might be called insufficiency objections. they claim that computational theories of mind fail because computation is insufficient to account for some capacity of the mind. arguments from qualia, such as frank jackson's knowledge argument, can be understood as objections to computational theories of mind in this way—though they take aim at physicalist conceptions of the mind in general, and not computational theories specifically.there are also objections which are directly tailored for computational theories of mind.
putnam himself (see in particular representation and reality and the first part of renewing philosophy) became a prominent critic of computationalism for a variety of reasons, including ones related to searle's chinese room arguments, questions of world-word reference relations, and thoughts about the mind-body relationship. regarding functionalism in particular, putnam has claimed along lines similar to, but more general than searle's arguments, that the question of whether the human mind can implement computational states is not relevant to the question of the nature of mind, because "every ordinary open system realizes every abstract finite automaton." computationalists have responded by aiming to develop criteria describing what exactly counts as an implementation.roger penrose has proposed the idea that the human mind does not use a knowably sound calculation procedure to understand and discover mathematical intricacies. this would mean that a normal turing complete computer would not be able to ascertain certain mathematical truths that human minds can.


=== pancomputationalism ===
supporters of ctm are faced with a simple yet important question whose answer has proved elusive and controversial: what does it take for a physical system (such as a mind, or an artificial computer) to perform computations? a very straightforward account is based on a simple mapping between abstract mathematical computations and physical systems: a system performs computation c if and only if there is a mapping between a sequence of states individuated by c and a sequence of states individuated by a physical description of the systemputnam (1988) and searle (1992) argue that this simple mapping account (sma) trivializes the empirical import of computational descriptions. as putnam put it, “everything is a probabilistic automaton under some description”.  even rocks, walls, and buckets of water—contrary to appearances—are computing systems. gualtiero piccinini identifies different versions of pancomputationalism.in response to the trivialization criticism, and to restrict sma, philosophers of mind have offered different accounts of computational systems. these typically include causal account, semantic account, syntactic account, and mechanistic account. instead of a semantic restriction, the syntactic account imposes a syntactic restriction. the mechanistic account was first introduced by gualtiero piccinini in 2007.


== prominent scholars ==
daniel dennett proposed the multiple drafts model, in which consciousness seems linear but is actually blurry and gappy, distributed over space and time in the brain. consciousness is the computation, there is no extra step or "cartesian theater" in which you become conscious of the computation.
david marr proposed that cognitive processes have three levels of description: the computational level (which describes that computational problem (i.e., input/output mapping) computed by the cognitive process); the algorithmic level (which presents the algorithm used for computing the problem postulated at the computational level); and the implementational level (which describes the physical implementation of the algorithm postulated at the algorithmic level in biological matter, e.g. the brain). (marr 1981)
georges rey, professor at the university of maryland, builds on jerry fodor's representational theory of mind to produce his own version of a computational/representational theory of thought.
hilary putnam proposed functionalism to describe consciousness, asserting that it is the computation that equates to consciousness, regardless of whether the computation is operating in a brain, in a computer, or in a "brain in a vat."
jerry fodor argues that mental states, such as beliefs and desires, are relations between individuals and mental representations. he maintains that these representations can only be correctly explained in terms of a language of thought (lot) in the mind. further, this language of thought itself is codified in the brain, not just a useful explanatory tool. fodor adheres to a species of functionalism, maintaining that thinking and other mental processes consist primarily of computations operating on the syntax of the representations that make up the language of thought. in later work (concepts and the elm and the expert), fodor has refined and even questioned some of his original computationalist views, and adopted a highly modified version of lot (see lot2).
steven pinker described a "language instinct," an evolved, built-in capacity to learn language (if not writing).
ulric neisser coined the term 'cognitive psychology' in his book published in 1967 (cognitive psychology), wherein neisser characterizes people as dynamic information-processing systems whose mental operations might be described in computational terms.


== alternative theories ==
classical associationism
connectionism
enactivism
memory-prediction framework
perceptual control theory
situated cognition


== see also ==


== notes ==


== references ==
c. randy gallistel learning and representation. in r. menzel (ed) learning theory and behavior. vol 1 of learning and memory - a comprehensive reference. 4 vols (j. byrne, ed). oxford: elsevier. pp. 227–242.
david marr (1981) vision: a computational investigation into the human representation and processing of visual information. cambridge, massachusetts: the mit press.
gualtiero piccinini (2015). physical computation: a mechanistic account. ny, oxford university press.
gualtiero piccinini (2017) "computation in physical systems", the stanford encyclopedia of philosophy (summer 2017 edition), edward n. zalta (ed.), url = <https://plato.stanford.edu/archives/sum2017/entries/computation-physicalsystems/>.
harnad, stevan (1994). "computation is just interpretable symbol manipulation: cognition isn't". minds and machines. 4 (4): 379–390. doi:10.1007/bf00974165. s2cid 230344.
hilary putnam (1979) mathematics, matter, and method: philosophical papers, vol. 1. cambridge, massachusetts: the mit press.
hilary putnam (1991) representation and reality. cambridge, massachusetts: the mit press.
hilary putnam (1995) renewing philosophy. cambridge, massachusetts: harvard university press.
jerry fodor (1975) the language of thought. cambridge, massachusetts: the mit press.
jerry fodor (1995) the elm and the expert: mentalese and its semantics.  cambridge, massachusetts: the mit press.
jerry fodor (1998) concepts: where cognitive science went wrong. oxford and new york: oxford university press.
jerry fodor (2010) lot2: the language of thought revisited. oxford and new york: oxford university press.
john searle (1992) the rediscovery of the mind. cambridge, massachusetts: the mit press.
matthias scheutz, ed. (2003) computationalism: new directions. cambridge, massachusetts: the mit press.
ned block, ed. (1983). readings in philosophy of psychology, volume 1. cambridge, massachusetts: harvard university press.
shimon edelman (2008) computing the mind: how the mind really works.
steven pinker (1997) how the mind works.
tim crane (2003). the mechanical mind: a philosophical introduction to minds, machines, and mental representation. new york, ny: routledge.
zenon pylyshyn (1984) computation and cognition. cambridge, massachusetts: the mit press.


== external links ==
a computational foundation for the study of cognition by david chalmers
computational theory of mind at philpapers
computational theory of mind at the indiana philosophy ontology project
bruno marchal argues that physical supervenience is not compatible with computational theory (french)
collection of links to online papers
computationalism: the very idea, an overview of computationalism by david davenport.
fodor, the mind doesn't work that way
the cognitive process consciousness model of the mind
zalta, edward n. (ed.). "the computational theory of mind". stanford encyclopedia of philosophy.